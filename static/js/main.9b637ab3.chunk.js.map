{"version":3,"sources":["components/ButtonAppBar.js","services/GlobalState.js","services/Snow.js","services/Logger.js","components/Login.js","components/Incidents.js","components/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","content","padding","ButtonAppBar","classes","className","AppBar","position","Typography","variant","loggedIn","setLoggedIn","isLoggedIn","GlobalState","instance","this","username","undefined","password","instanceId","login","a","BASE","path","PATHS","LOGIN","Promise","resolve","reject","options","url","method","auth","Axios","then","val","rej","getIncidents","INCIDENTS","updateIncident","sdesc","desc","sysId","UPDATE_INCIDENT","data","short_description","description","addIncident","ADD_INCIDENT","deleteIncident","DELETE_INCIDENT","Snow","USER_NAME","PASSWORD","log","forEach","container","display","flexWrap","margin","input","paper","textAlign","color","palette","text","secondary","button","Login","props","useState","loading","setLoading","e","preventDefault","document","getElementById","value","toast","error","res","status","success","history","push","Logger","Fragment","style","justifyContent","alignItems","noValidate","autoComplete","Paper","width","Grid","direction","item","xs","TextField","id","label","textField","type","name","defaultValue","flexDirection","Button","disabled","size","onClick","LinearProgress","Incidents","React","toEdit","setToEdit","addOpen","setAddOpen","editOpen","setEditOpen","deleteOpen","setDeleteOpen","columns","field","state","setState","handleAddOpen","handleAddClose","handleEditClose","handleDeleteClose","loadIncidents","response","Object","assign","result","useEffect","handleUpdate","sys_id","uData","map","handleDelete","filter","handleAdd","unshift","number","actions","icon","tooltip","event","rowData","detailPanel","Chip","marginLeft","marginTop","clickable","made_sla","onRowClick","togglePanel","actionsColumnIndex","components","Toolbar","IconButton","aria-label","backgroundColor","Dialog","open","onClose","aria-labelledby","DialogTitle","DialogContent","DialogContentText","autoFocus","fullWidth","multiline","DialogActions","aria-describedby","Dashboard","App","basename","exact","render","POSITION","TOP_RIGHT","autoClose","Boolean","window","location","hostname","match","ReactDOM","globalState","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9b637ab3.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n// import Button from '@material-ui/core/Button';\n// import IconButton from '@material-ui/core/IconButton';\n// import MenuIcon from '@material-ui/icons/Menu';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n  }\n}));\n\nexport default function ButtonAppBar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title}>\n            SNOW Client\n          </Typography>\n          {/* <Button color=\"inherit\">Login</Button> */}\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n","class GlobalState {\n\n    constructor(loggedIn) {\n        if (!GlobalState.instance) {\n            this.loggedIn = loggedIn;\n            this.username = undefined;\n            this.password = undefined;\n            this.instanceId = undefined;\n            GlobalState.instance = this;\n        }\n        return GlobalState.instance\n    }\n\n    setLoggedIn = (loggedIn) => {\n        this.loggedIn = loggedIn;\n    }\n\n    isLoggedIn = () => {\n        return this.loggedIn;\n    }\n}\n\nexport default new GlobalState();\n","import Axios from 'axios';\nimport GlobalState from './GlobalState'\n\nclass Snow {\n    constructor() {\n        if (!Snow.instance) {\n            this.BASE = undefined;\n            this.USER_NAME = undefined;\n            this.PASSWORD = undefined;\n            this.PATHS = {\n                LOGIN: (username) => `/v2/table/sys_user?user_name=${username}`,\n                INCIDENTS: () => '/table/incident?sysparm_limit=20&sysparm_query=active=true',\n                UPDATE_INCIDENT: (sysId) => `/table/incident/${sysId}`,\n                ADD_INCIDENT: () => '/table/incident',\n                DELETE_INCIDENT: (sysId) => `/table/incident/${sysId}`,\n            }\n            Snow.instance = this;\n        }\n\n        return Snow.instance;\n    }\n\n    login = async (username, password, instanceId) => {\n        this.BASE = `https://${instanceId}.service-now.com/api/now`;\n        const path = this.BASE + this.PATHS.LOGIN(username);\n        return new Promise((resolve, reject) => {\n            const options = {\n                url: path,\n                method: 'get',\n                auth: {\n                    username: `${username}`,\n                    password: `${password}`\n                }\n            };\n            Axios(options).then((val) => {\n                resolve(val);\n            }, (rej) => {\n                reject(rej);\n            });\n        })\n    }\n\n    getIncidents = async () => {\n        const path = this.BASE + this.PATHS.INCIDENTS()\n        return new Promise((resolve, reject) => {\n            const options = {\n                url: path,\n                method: 'get',\n                auth: {\n                    username: `${GlobalState.username}`,\n                    password: `${GlobalState.password}`\n                }\n            };\n            Axios(options).then((val) => {\n                resolve(val);\n            }, (rej) => {\n                reject(rej);\n            });\n        })\n    }\n\n    updateIncident = async (sdesc, desc, sysId) => {\n        const path = this.BASE + this.PATHS.UPDATE_INCIDENT(sysId)\n        return new Promise((resolve, reject) => {\n            const options = {\n                url: path,\n                method: 'put',\n                auth: {\n                    username: `${GlobalState.username}`,\n                    password: `${GlobalState.password}`\n                },\n                data: {\n                    short_description: sdesc,\n                    description: desc\n                }\n            };\n            Axios(options).then((val) => {\n                resolve(val);\n            }, (rej) => {\n                reject(rej);\n            });\n        })\n    }\n\n    addIncident = async (sdesc, desc) => {\n        const path = this.BASE + this.PATHS.ADD_INCIDENT()\n        return new Promise((resolve, reject) => {\n            const options = {\n                url: path,\n                method: 'post',\n                auth: {\n                    username: `${GlobalState.username}`,\n                    password: `${GlobalState.password}`\n                },\n                data: {\n                    short_description: sdesc,\n                    description: desc\n                }\n            };\n            Axios(options).then((val) => {\n                resolve(val);\n            }, (rej) => {\n                reject(rej);\n            });\n        })\n    }\n\n    deleteIncident = async (sysId) => {\n        const path = this.BASE + this.PATHS.DELETE_INCIDENT(sysId)\n        return new Promise((resolve, reject) => {\n            const options = {\n                url: path,\n                method: 'delete',\n                auth: {\n                    username: `${GlobalState.username}`,\n                    password: `${GlobalState.password}`\n                }\n            };\n            Axios(options).then((val) => {\n                resolve(val);\n            }, (rej) => {\n                reject(rej);\n            });\n        })\n    }\n}\n\nconst instance = new Snow();\n// Object.freeze(instance);\nexport default instance;\n","class Logger {\n    log = (...data) => {\n        data.forEach(() => {\n            // console.log(item);\n        })\n    }\n}\n\nexport default new Logger();\n","import React, { useState } from 'react'\nimport TextField from '@material-ui/core/TextField'\nimport Paper from '@material-ui/core/Paper'\nimport Grid from '@material-ui/core/Grid'\nimport Button from '@material-ui/core/Button'\nimport LinearProgress from '@material-ui/core/LinearProgress'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { toast } from 'react-toastify'\nimport Error from '@material-ui/icons/Error'\nimport ButtonAppBar from './ButtonAppBar'\nimport Snow from '../services/Snow'\nimport Logger from '../services/Logger'\nimport GlobalState from '../services/GlobalState'\n\nconst useStyles = makeStyles(theme => ({\n  container: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    margin: \"16px\"\n  },\n  input: {\n    margin: theme.spacing(1),\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n}));\n\nexport default function Login(props) {\n  const classes = useStyles();\n  const [loading, setLoading] = useState(false);\n  const loggedIn = GlobalState.isLoggedIn();\n  if (loggedIn) props.history.push('/dashboard');\n  async function handleClick(e) {\n    e.preventDefault();\n    setLoading(true);\n    const username = document.getElementById('username').value;\n    const password = document.getElementById('password').value;\n    const instanceId = document.getElementById('instanceId').value;\n    if(!username||!password||!instanceId){\n        toast.error(<span><Error /> One or more field(s) are empty. Please try again.</span>)\n        setLoading(false);\n        return;\n    }\n    try {\n      const res = await Snow.login(username, password, instanceId)\n      if (res.status === 200) {\n        GlobalState.setLoggedIn(true);\n        GlobalState.username = username;\n        GlobalState.password = password;\n        GlobalState.instanceId = instanceId;\n        toast.success(<span>Logged in!</span>);\n        setLoading(false)\n        props.history.push('/dashboard')\n      }\n      Logger.log('Authenticated', res);\n    } catch (err) {\n      toast.error(<span><Error /> Login failed!!</span>);\n      setLoading(false)\n      Logger.log(\"Error\", err);\n    }\n  }\n\n  return (\n    <React.Fragment>\n      <ButtonAppBar />\n      <form className={classes.container} style={{ justifyContent: \"center\", alignItems: \"center\" }} noValidate autoComplete=\"off\">\n        <Paper className={classes.paper} style={{ width: \"500px\" }}>\n          <Grid container spacing={1} direction=\"column\" >\n            <Grid item xs={12}>\n              <TextField\n                style={{ width: \"100%\" }}\n                id=\"username\"\n                label=\"Username\"\n                className={classes.textField}\n                type=\"text\"\n                name=\"username\"\n                autoComplete=\"email\"\n                margin=\"normal\"\n                variant=\"outlined\"\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                style={{ width: \"100%\" }}\n                id=\"password\"\n                label=\"Password\"\n                className={classes.textField}\n                type=\"password\"\n                name=\"pwd\"\n                margin=\"normal\"\n                variant=\"outlined\"\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                style={{ width: \"100%\" }}\n                id=\"instanceId\"\n                defaultValue=\"dev78916\"\n                label=\"Instance name\"\n                className={classes.textField}\n                type=\"email\"\n                name=\"email\"\n                autoComplete=\"email\"\n                margin=\"normal\"\n                variant=\"outlined\"\n              />\n            </Grid>\n            <Grid item xs={12} style={{ display: \"flex\", justifyContent: \"center\", alignItems: \"center\", flexDirection: \"column\" }}>\n              <Button style={{ width: \"100%\", margin: '0' }} disabled={loading} variant=\"contained\" color=\"primary\" size=\"large\" className={classes.button} onClick={handleClick}>\n                Login\n            </Button>\n              {loading ?\n                <LinearProgress variant=\"query\" style={{ width: \"100%\", margin: '0' }} />\n                : \"\"\n              }\n            </Grid>\n          </Grid>\n        </Paper>\n      </form>\n    </React.Fragment>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport MaterialTable, { MTableToolbar } from 'material-table';\nimport Typography from '@material-ui/core/Typography'\nimport Chip from '@material-ui/core/Chip'\nimport Button from '@material-ui/core/Button'\nimport TextField from '@material-ui/core/TextField'\nimport { toast } from 'react-toastify'\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport IconButton from '@material-ui/core/IconButton';\nimport AddIcon from '@material-ui/icons/Add'\nimport Success from '@material-ui/icons/CheckCircleOutline'\nimport Error from '@material-ui/icons/Error'\nimport Logger from '../services/Logger'\nimport Snow from '../services/Snow'\n\nexport default function Incidents() {\n\n    const [toEdit, setToEdit] = React.useState({});\n    const [addOpen, setAddOpen] = React.useState(false);\n    const [editOpen, setEditOpen] = React.useState(false);\n    const [deleteOpen, setDeleteOpen] = React.useState(false);\n    const [state, setState] = useState({\n        columns: [\n            { title: 'Number', field: 'number' },\n            { title: 'Opened', field: 'opened_at' },\n            { title: 'Short Description', field: 'short_description' },\n\n        ],\n        data: [\n\n        ],\n    });\n\n    const handleAddOpen = () => {\n        setAddOpen(true);\n    };\n\n    const handleAddClose = () => {\n        setAddOpen(false);\n    };\n\n    const handleEditOpen = () => {\n        setEditOpen(true);\n    };\n\n    const handleEditClose = () => {\n        setEditOpen(false);\n    };\n\n    const handleDeleteOpen = () => {\n        setDeleteOpen(true);\n    };\n\n    const handleDeleteClose = () => {\n        setDeleteOpen(false);\n    };\n\n    const loadIncidents = async () => {\n        try {\n            const response = await Snow.getIncidents();\n            setState(Object.assign(response.data.result, {}, { columns: state.columns, data: response.data.result }));\n            Logger.log(\"Loaded\", response.data.result);\n        } catch (e) {\n            Logger.log(e);\n        }\n    }\n    useEffect(() => {\n        loadIncidents();\n    }, []);\n\n    const handleUpdate = async () => {\n        try {\n            const sdesc = document.getElementById('sdesc').value;\n            const desc = document.getElementById('desc').value;\n            if(!sdesc||!desc){\n                toast.error(<span><Error /> One or more field(s) are empty. Please try again.</span>)\n                return;\n            }\n            const response = await Snow.updateIncident(sdesc, desc, toEdit.sys_id);\n            if (response && response.status === 200) {\n                const uData = state.data.map(e => {\n                    if (e.sys_id === toEdit.sys_id) {\n                        return response.data.result\n                    }\n                    return e;\n                });\n                Logger.log(\"Updated\", response)\n                setState(Object.assign(state.data, {}, { columns: state.columns, data: uData }));\n                handleEditClose()\n                toast.success(<span><Success /> Successfully updated the incident.</span>)\n            } else {\n                handleEditClose()\n                toast.error(<span><Error /> Error updating the incident. Please try again later.</span>)\n            }\n        } catch (e) {\n            toast.error(<span><Error /> Error updating the record. Please try again later.</span>)\n            Logger.log(\"Error\", e);\n        }\n\n    }\n\n    const handleDelete = async () => {\n        try {\n            const response = await Snow.deleteIncident(toEdit.sys_id);\n            if (response && response.status === 204) {\n                const uData = state.data.filter(e => e.sys_id !== toEdit.sys_id);\n                setState(Object.assign(state.data, {}, { columns: state.columns, data: uData }));\n                handleDeleteClose()\n                toast.success(<span><Success /> Successfully deleted the incident.</span>)\n                Logger.log(\"Deleted\", response.data);\n            } else {\n                handleDeleteClose()\n                toast.error(<span><Error /> Error deleting the incident. Please try again later.</span>)\n            }\n        } catch (e) {\n            handleDeleteClose()\n            toast.error(<span><Error /> Error deleting the incident. Please try again later.</span>)\n            Logger.log(\"Error\", e);\n        }\n    }\n\n    const handleAdd = async () => {\n        try {\n            const sdesc = document.getElementById('asdesc').value;\n            const desc = document.getElementById('adesc').value;\n            if(!sdesc||!desc){\n                toast.error(<span><Error /> One or more field(s) are empty. Please try again.</span>)\n                return;\n            }\n            const response = await Snow.addIncident(sdesc, desc)\n            if (response && response.status === 201) {\n                const uData = state.data;\n                uData.unshift(response.data.result);\n                setState(Object.assign(state.data, {}, { columns: state.columns, data: uData }));\n                handleAddClose()\n                toast.success(<span><Success /> Successfully updated the incident. width number {response.data.result.number}</span>)\n                Logger.log(\"Added\", response.data.result);\n            } else {\n                handleAddClose()\n                toast.error(<span><Error /> Error adding the incident. Please try again later.</span>)\n            }\n        } catch (e) {\n            handleAddClose()\n            toast.error(<span><Error /> Error adding the incident. Please try again later.</span>)\n            Logger.log(e);\n        }\n\n    }\n\n    return (\n        <React.Fragment>\n            <MaterialTable\n                style={{ margin: \"16px\" }}\n                title=\"Incidents\"\n                columns={state.columns}\n                data={state.data}\n                actions={[\n                    {\n                        icon: 'edit',\n                        tooltip: 'Edit incident',\n                        onClick: (event, rowData) => {\n                            setToEdit(Object.assign(toEdit, {}, rowData));\n                            handleEditOpen();\n                        }\n                    },\n                    {\n                        icon: 'delete',\n                        tooltip: 'Delete incident',\n                        onClick: (event, rowData) => {\n                            setToEdit(Object.assign(toEdit, {}, rowData));\n                            handleDeleteOpen()\n                        }\n                    }\n                ]}\n                detailPanel={rowData => {\n                    return (\n                        <React.Fragment>\n                            <Chip\n                                style={{ marginLeft: \"16px\", marginRight: \"16px\", marginTop: \"16px\" }}\n                                label={rowData.number}\n                                clickable\n                                color=\"primary\"\n                            />\n                            <Chip\n                                style={{ marginLeft: \"16px\", marginRight: \"16px\", marginTop: \"16px\" }}\n                                label={`System Id: ${rowData.sys_id}`}\n                                clickable\n                                color=\"secondary\"\n                            />\n                            <Typography style={{ marginLeft: \"16px\", marginRight: \"16px\", marginTop: \"16px\" }} variant=\"h6\">\n                                {`${rowData.made_sla ? 'Yes' : 'No'} SLA was made.`}<br />\n                            </Typography>\n\n                            <Typography style={{ margin: \"16px\" }} variant=\"h6\">\n                                {`${rowData.description}`}\n                            </Typography>\n\n                        </React.Fragment>\n\n                    )\n                }}\n                onRowClick={(event, rowData, togglePanel) => togglePanel()}\n\n                options={{\n                    actionsColumnIndex: -1\n                }}\n                components={{\n                    Toolbar: props => (\n                        <div>\n                            <MTableToolbar {...props} />\n                            <IconButton aria-label=\"Add\" onClick={handleAddOpen} style={{ backgroundColor: \"#1976d2\", color: \"white\" }} tooltip=\"Add incident\">\n                                <AddIcon />\n                            </IconButton>\n                        </div>\n                    ),\n                }}\n            />\n            {/* For Updating */}\n            <Dialog open={editOpen} onClose={handleEditClose} aria-labelledby=\"form-dialog-title\">\n                <DialogTitle id=\"form-dialog-title\">Edit: {toEdit ? toEdit.number : \"\"}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText>\n                        Please modify the following details.\n                    </DialogContentText>\n                    <TextField\n                        defaultValue={toEdit ? toEdit.short_description : \"\"}\n                        autoFocus\n                        margin=\"dense\"\n                        id=\"sdesc\"\n                        label=\"Short Description\"\n                        type=\"text\"\n                        fullWidth\n                        variant=\"outlined\"\n                    />\n                    <TextField\n                        defaultValue={toEdit ? toEdit.description : \"\"}\n                        style={{ marginTop: \"16px\" }}\n                        autoFocus\n                        margin=\"dense\"\n                        id=\"desc\"\n                        label=\"Description\"\n                        type=\"text\"\n                        fullWidth\n                        multiline\n                        variant=\"outlined\"\n                    />\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleEditClose} color=\"primary\">\n                        Cancel\n                    </Button>\n                    <Button onClick={handleUpdate} color=\"primary\">\n                        Update\n                    </Button>\n                </DialogActions>\n            </Dialog>\n            {/* For Delete Confirmation */}\n            <Dialog\n                open={deleteOpen}\n                onClose={handleDeleteClose}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n            >\n                <DialogTitle id=\"alert-dialog-title\">{\"Delete Incident?\"}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText id=\"alert-dialog-description\">\n                        Are you sure you want to delete this incident?\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleDeleteClose} color=\"primary\">\n                        No\n                    </Button>\n                    <Button onClick={handleDelete} color=\"primary\" autoFocus>\n                        Yes\n                    </Button>\n                </DialogActions>\n            </Dialog>\n            {/* For Adding New Incident Record */}\n            <Dialog open={addOpen} onClose={handleAddClose} aria-labelledby=\"form-dialog-title\">\n                <DialogTitle id=\"form-dialog-title\">Add incident</DialogTitle>\n                <DialogContent>\n                    <DialogContentText>\n                        Please fill the following details.\n                    </DialogContentText>\n                    <TextField\n                        autoFocus\n                        margin=\"dense\"\n                        id=\"asdesc\"\n                        label=\"Short Description\"\n                        type=\"text\"\n                        fullWidth\n                        variant=\"outlined\"\n                    />\n                    <TextField\n                        style={{ marginTop: \"16px\" }}\n                        autoFocus\n                        margin=\"dense\"\n                        id=\"adesc\"\n                        label=\"Description\"\n                        type=\"text\"\n                        fullWidth\n                        multiline\n                        variant=\"outlined\"\n                    />\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleAddClose} color=\"primary\">\n                        Cancel\n                    </Button>\n                    <Button onClick={handleAdd} color=\"primary\">\n                        Add\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </React.Fragment>\n    );\n\n\n}\n","import React from 'react'\nimport ButtonAppBar from './ButtonAppBar'\nimport Incidents from './Incidents'\nimport GlobalState from '../services/GlobalState'\n\nexport default function Dashboard(props) {\n\n    const loggedIn = GlobalState.isLoggedIn();\n    if (!loggedIn) props.history.push('/');\n    return (\n        <React.Fragment>\n            <ButtonAppBar />\n            <Incidents {...props} />\n        </React.Fragment>\n    )\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport Login from \"./components/Login\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport Dashboard from \"./components/Dashboard\";\n\nfunction App() {\n  return (\n    <HashRouter basename=\"/\">\n      <div className=\"App\">\n        <React.Fragment>\n          <Switch>\n            <Route\n              path=\"/\"\n              exact\n              render={props => (\n                <Login {...props}  />\n              )}\n            />\n            <Route\n              path=\"/dashboard\"\n              render={props => (\n                <Dashboard {...props} />\n              )}\n            />\n          </Switch>\n          <ToastContainer\n            position={toast.POSITION.TOP_RIGHT}\n            autoClose={5000}\n          />\n        </React.Fragment>\n      </div>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'typeface-roboto';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport GlobalState from './services/GlobalState'\n\nReactDOM.render(<App globalState={GlobalState} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}