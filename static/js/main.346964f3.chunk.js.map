{"version":3,"sources":["components/ButtonAppBar.js","components/Incidents.js","components/Dashboard.js","components/Login.js","App.js","serviceWorker.js","index.js","services/GlobalState.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","content","padding","ButtonAppBar","props","classes","className","AppBar","position","Toolbar","Typography","variant","Incidents","useState","columns","field","data","state","setState","loadIncidents","a","Axios","get","auth","username","password","response","Object","assign","result","console","log","status","useEffect","style","margin","detailPanel","rowData","Fragment","Chip","marginLeft","marginTop","label","number","clickable","color","made_sla","description","onRowClick","event","togglePanel","editable","onRowAdd","newData","Promise","resolve","setTimeout","push","onRowUpdate","oldData","indexOf","onRowDelete","splice","Dashboard","globalState","isLoggedIn","history","container","display","flexWrap","input","paper","textAlign","palette","text","secondary","button","Login","e","preventDefault","document","getElementById","value","instanceId","options","url","method","axios","then","val","res","raw","setLoggedIn","rej","justifyContent","alignItems","noValidate","autoComplete","Paper","width","Grid","direction","item","xs","TextField","id","textField","type","name","defaultValue","Button","size","onClick","App","aprops","basename","path","exact","render","Boolean","window","location","hostname","match","loggedIn","this","ReactDOM","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.346964f3.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n// import Button from '@material-ui/core/Button';\n// import IconButton from '@material-ui/core/IconButton';\n// import MenuIcon from '@material-ui/icons/Menu';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n  }\n}));\n\nexport default function ButtonAppBar(props) {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title}>\n            SNOW Client\n          </Typography>\n          {/* <Button color=\"inherit\">Login</Button> */}\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport MaterialTable from 'material-table';\nimport Axios from 'axios';\nimport Typography from '@material-ui/core/Typography'\nimport Chip from '@material-ui/core/Chip'\n\nexport default function Incidents() {\n\n    const [state, setState] = useState({\n        columns: [\n            { title: 'Number', field: 'number' },\n            { title: 'Opened', field: 'opened_at' },\n            { title: 'Short Description', field: 'short_description' },\n\n        ],\n        data: [\n\n        ],\n    });\n    const loadIncidents = async () => {\n        try {\n            let response = await Axios.get(\"https://dev78916.service-now.com/api/now/table/incident?sysparm_limit=10\", {\n                auth: {\n                    username: `admin`,\n                    password: `@Jc403904y`\n                }\n            });\n            setState(Object.assign(response.data.result, {}, { columns: state.columns, data: response.data.result }));\n            console.log(response.status, response.data.result);\n        } catch (e) {\n            console.log(e);\n        }\n    }\n    useEffect(() => {\n        loadIncidents();\n    }, []);\n\n    const getDetails = async () => {\n\n    }\n\n    return (\n        <MaterialTable\n            style={{ margin: \"16px\" }}\n            title=\"Incidents\"\n            columns={state.columns}\n            data={state.data}\n            detailPanel={rowData => {\n                return (\n                    <React.Fragment>\n                        <Chip\n                            style={{ marginLeft: \"16px\", marginRight: \"16px\", marginTop: \"16px\" }}\n                            label={rowData.number}\n                            clickable\n                            color=\"primary\"\n                        />\n                        <Typography style={{ marginLeft: \"16px\", marginRight: \"16px\", marginTop: \"16px\" }} variant=\"h5\">\n                            {`${rowData.made_sla ? 'Yes' : 'No'} SLA was made.`}\n                        </Typography>\n\n                        <Typography style={{ margin: \"16px\" }} variant=\"h6\">\n                            {`${rowData.description}`}\n                        </Typography>\n\n                    </React.Fragment>\n\n                )\n            }}\n            onRowClick={(event, rowData, togglePanel) => togglePanel()}\n            editable={{\n                onRowAdd: newData =>\n                    new Promise(resolve => {\n                        setTimeout(() => {\n                            resolve();\n                            const data = [...state.data];\n                            data.push(newData);\n                            setState({ ...state, data });\n                        }, 600);\n                    }),\n                onRowUpdate: (newData, oldData) =>\n                    new Promise(resolve => {\n                        setTimeout(() => {\n                            resolve();\n                            const data = [...state.data];\n                            data[data.indexOf(oldData)] = newData;\n                            setState({ ...state, data });\n                        }, 600);\n                    }),\n                onRowDelete: oldData =>\n                    new Promise(resolve => {\n                        setTimeout(() => {\n                            resolve();\n                            const data = [...state.data];\n                            data.splice(data.indexOf(oldData), 1);\n                            setState({ ...state, data });\n                        }, 600);\n                    }),\n            }}\n        />\n    );\n}\n","import React from 'react'\nimport ButtonAppBar from './ButtonAppBar'\nimport Incidents from './Incidents'\n\nexport default function Dashboard(props) {\n\n    const loggedIn = props.globalState.isLoggedIn();\n    if (!loggedIn) props.history.push('/');\n    console.log(\"Logged In = \" + props.globalState.isLoggedIn)\n    return (\n        <React.Fragment>\n            <ButtonAppBar />\n            <Incidents />\n        </React.Fragment>\n    )\n}","import React from 'react'\nimport TextField from '@material-ui/core/TextField'\nimport Paper from '@material-ui/core/Paper'\nimport Grid from '@material-ui/core/Grid'\nimport Button from '@material-ui/core/Button'\nimport ButtonAppBar from './ButtonAppBar'\nimport axios from 'axios'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles(theme => ({\n  container: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    margin: \"16px\"\n  },\n  input: {\n    margin: theme.spacing(1),\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n}));\n\nexport default function Login(props) {\n  const classes = useStyles();\n  let loggedIn = props.globalState.isLoggedIn();\n  if (loggedIn) props.history.push('/dashboard');\n  async function handleClick(e) {\n    e.preventDefault();\n    let username = document.getElementById('username').value;\n    let password = document.getElementById('password').value;\n    let instanceId = document.getElementById('instanceId').value;\n    try {\n      const options = {\n        url: `https://${instanceId}.service-now.com/api/now/v2/table/sys_user?user_name=${username}`,\n        method: 'get',\n        auth: {\n          username: `${username}`,\n          password: `${password}`\n        }\n      };\n      axios(options).then((val) => {\n        var res = {\n          raw: val,\n          status: val.status\n        }\n        if (val.status === 200) {\n          props.globalState.setLoggedIn(true);\n          props.history.push('/dashboard')\n        }\n        console.log('Authenticated', res);\n      }, (rej) => {\n        console.log(rej);\n      });\n    } catch (e) {\n      console.log(e)\n    }\n\n  }\n\n  return (\n    <React.Fragment>\n      <ButtonAppBar />\n      <form className={classes.container} style={{ justifyContent: \"center\", alignItems: \"center\" }} noValidate autoComplete=\"off\">\n        <Paper className={classes.paper} style={{ width: \"500px\" }}>\n          <Grid container spacing={1} direction=\"column\" >\n            <Grid item xs={12}>\n              <TextField\n                style={{ width: \"100%\" }}\n                id=\"username\"\n                label=\"Username\"\n                className={classes.textField}\n                type=\"text\"\n                name=\"username\"\n                autoComplete=\"email\"\n                margin=\"normal\"\n                variant=\"outlined\"\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                style={{ width: \"100%\" }}\n                id=\"password\"\n                label=\"Password\"\n                className={classes.textField}\n                type=\"password\"\n                name=\"pwd\"\n                margin=\"normal\"\n                variant=\"outlined\"\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                style={{ width: \"100%\" }}\n                id=\"instanceId\"\n                defaultValue=\"dev78916\"\n                label=\"Instance name\"\n                className={classes.textField}\n                type=\"email\"\n                name=\"email\"\n                autoComplete=\"email\"\n                margin=\"normal\"\n                variant=\"outlined\"\n              />\n            </Grid>\n            <Grid item xs={12} style={{ display: \"flex\", justifyContent: \"center\", alignItems: \"center\" }}>\n              <Button style={{ width: \"100%\", margin: '0' }} variant=\"contained\" color=\"primary\" size=\"large\" className={classes.button} onClick={handleClick}>\n                Login\n            </Button>\n            </Grid>\n          </Grid>\n        </Paper>\n      </form>\n    </React.Fragment>\n  );\n}","import React from 'react';\nimport './App.css';\nimport Dashboard from './components/Dashboard';\nimport { HashRouter } from \"react-router-dom\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Login from './components/Login';\n\nfunction App(aprops) {\n  console.log(aprops.globalState)\n  return (\n    <HashRouter basename=\"/\">\n      <div className=\"App\">\n        <React.Fragment>\n          <Switch>\n            <Route path=\"/\" exact render={(props) => <Login {...props} globalState={aprops.globalState} />} />\n            <Route path=\"/dashboard\" render={(props) => <Dashboard {...props} globalState={aprops.globalState} />} />\n          </Switch>\n        </React.Fragment>\n      </div>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'typeface-roboto';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport GlobalState from './services/GlobalState'\nconst globalState = new GlobalState(false);\nReactDOM.render(<App globalState={globalState} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","\nexport default class GlobalState {\n\n    constructor(loggedIn) {\n        this.loggedIn = loggedIn;\n    }\n\n    setLoggedIn = (loggedIn) => {\n        this.loggedIn = loggedIn;\n    }\n\n    isLoggedIn = () => {\n        return this.loggedIn;\n    }\n}"],"sourceRoot":""}