{"version":3,"sources":["components/ButtonAppBar.js","services/Logger.js","services/GlobalState.js","services/Snow.js","components/Incidents.js","components/Dashboard.js","components/Login.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","content","padding","ButtonAppBar","props","classes","className","AppBar","position","Typography","variant","log","data","forEach","item","console","loggedIn","setLoggedIn","isLoggedIn","GlobalState","instance","this","username","undefined","password","instanceId","login","a","BASE","path","PATHS","LOGIN","Promise","resolve","reject","options","url","method","auth","Axios","then","val","rej","getIncidents","INCIDENTS","updateIncident","sdesc","desc","sys_id","UPDATE_INCIDENT","short_description","description","addIncident","ADD_INCIDENT","deleteIncident","DELETE_INCIDENT","Snow","USER_NAME","PASSWORD","Incidents","React","useState","toEdit","setToEdit","addOpen","setAddOpen","editOpen","setEditOpen","deleteOpen","setDeleteOpen","columns","field","state","setState","handleAddOpen","handleAddClose","handleEditClose","handleDeleteClose","loadIncidents","response","Object","assign","result","Logger","useEffect","handleUpdate","document","getElementById","value","status","uData","map","e","toast","error","handleDelete","filter","handleAdd","unshift","number","Fragment","style","margin","actions","icon","tooltip","onClick","event","rowData","detailPanel","Chip","marginLeft","marginTop","label","clickable","color","made_sla","onRowClick","togglePanel","actionsColumnIndex","components","Toolbar","IconButton","aria-label","backgroundColor","Dialog","open","onClose","aria-labelledby","DialogTitle","id","DialogContent","DialogContentText","TextField","defaultValue","autoFocus","type","fullWidth","multiline","DialogActions","Button","aria-describedby","Dashboard","globalState","history","push","container","display","flexWrap","input","paper","textAlign","palette","text","secondary","button","Login","loading","setLoading","preventDefault","res","success","justifyContent","alignItems","noValidate","autoComplete","Paper","width","Grid","direction","xs","textField","name","flexDirection","disabled","size","LinearProgress","App","aprops","basename","exact","render","POSITION","TOP_RIGHT","autoClose","Boolean","window","location","hostname","match","ReactDOM","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.caad0ef6.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n// import Button from '@material-ui/core/Button';\n// import IconButton from '@material-ui/core/IconButton';\n// import MenuIcon from '@material-ui/icons/Menu';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n  }\n}));\n\nexport default function ButtonAppBar(props) {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title}>\n            SNOW Client\n          </Typography>\n          {/* <Button color=\"inherit\">Login</Button> */}\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n","class Logger {\n    log = (...data) => {\n        data.forEach((item) => {\n            console.log(item);\n        })\n    }\n}\n\nexport default new Logger();","class GlobalState {\n\n    constructor(loggedIn) {\n        if (!GlobalState.instance) {\n            this.loggedIn = loggedIn;\n            this.username = undefined;\n            this.password = undefined;\n            this.instanceId = undefined;\n            GlobalState.instance = this;\n        }\n        return GlobalState.instance\n    }\n\n    setLoggedIn = (loggedIn) => {\n        this.loggedIn = loggedIn;\n    }\n\n    isLoggedIn = () => {\n        return this.loggedIn;\n    }\n}\n\nexport default new GlobalState();","import Axios from 'axios';\nimport GlobalState from './GlobalState'\nclass Snow {\n    constructor() {\n        if (!Snow.instance) {\n            this.BASE = undefined;\n            this.USER_NAME = undefined;\n            this.PASSWORD = undefined;\n            this.PATHS = {\n                LOGIN: (username) => `/v2/table/sys_user?user_name=${username}`,\n                INCIDENTS: () => '/table/incident?sysparm_limit=20&sysparm_query=active=true',\n                UPDATE_INCIDENT: (sys_id) => `/table/incident/${sys_id}`,\n                ADD_INCIDENT: () => '/table/incident',\n                DELETE_INCIDENT: (sys_id) => `/table/incident/${sys_id}`,\n            }\n            Snow.instance = this;\n        }\n\n        return Snow.instance;\n    }\n\n    login = async (username, password, instanceId) => {\n        this.BASE = `https://${instanceId}.service-now.com/api/now`;\n        let path = this.BASE + this.PATHS.LOGIN(username);\n        return new Promise((resolve, reject) => {\n            const options = {\n                url: path,\n                method: 'get',\n                auth: {\n                    username: `${username}`,\n                    password: `${password}`\n                }\n            };\n            Axios(options).then((val) => {\n                resolve(val);\n            }, (rej) => {\n                reject(rej);\n            });\n        })\n    }\n\n    getIncidents = async () => {\n        let path = this.BASE + this.PATHS.INCIDENTS()\n        return new Promise((resolve, reject) => {\n            const options = {\n                url: path,\n                method: 'get',\n                auth: {\n                    username: `${GlobalState.username}`,\n                    password: `${GlobalState.password}`\n                }\n            };\n            Axios(options).then((val) => {\n                resolve(val);\n            }, (rej) => {\n                reject(rej);\n            });\n        })\n    }\n\n    updateIncident = async (sdesc, desc, sys_id) => {\n        let path = this.BASE + this.PATHS.UPDATE_INCIDENT(sys_id)\n        return new Promise((resolve, reject) => {\n            const options = {\n                url: path,\n                method: 'put',\n                auth: {\n                    username: `${GlobalState.username}`,\n                    password: `${GlobalState.password}`\n                },\n                data: {\n                    short_description: sdesc,\n                    description: desc\n                }\n            };\n            Axios(options).then((val) => {\n                resolve(val);\n            }, (rej) => {\n                reject(rej);\n            });\n        })\n    }\n\n    addIncident = async (sdesc, desc) => {\n        let path = this.BASE + this.PATHS.ADD_INCIDENT()\n        return new Promise((resolve, reject) => {\n            const options = {\n                url: path,\n                method: 'post',\n                auth: {\n                    username: `${GlobalState.username}`,\n                    password: `${GlobalState.password}`\n                },\n                data: {\n                    short_description: sdesc,\n                    description: desc\n                }\n            };\n            Axios(options).then((val) => {\n                resolve(val);\n            }, (rej) => {\n                reject(rej);\n            });\n        })\n    }\n\n    deleteIncident = async (sys_id) => {\n        let path = this.BASE + this.PATHS.DELETE_INCIDENT(sys_id)\n        return new Promise((resolve, reject) => {\n            const options = {\n                url: path,\n                method: 'delete',\n                auth: {\n                    username: `${GlobalState.username}`,\n                    password: `${GlobalState.password}`\n                }\n            };\n            Axios(options).then((val) => {\n                resolve(val);\n            }, (rej) => {\n                reject(rej);\n            });\n        })\n    }\n}\n\nconst instance = new Snow();\n// Object.freeze(instance);\nexport default instance;","import React, { useEffect, useState } from 'react';\nimport MaterialTable, { MTableToolbar } from 'material-table';\nimport Typography from '@material-ui/core/Typography'\nimport Chip from '@material-ui/core/Chip'\nimport Button from '@material-ui/core/Button'\nimport TextField from '@material-ui/core/TextField'\nimport { toast } from 'react-toastify'\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport IconButton from '@material-ui/core/IconButton';\nimport AddIcon from '@material-ui/icons/Add'\nimport Logger from '../services/Logger'\nimport Snow from '../services/Snow'\nimport Error from '@material-ui/icons/Error'\nimport Success from '@material-ui/icons/CheckCircleOutline'\n\nexport default function Incidents() {\n\n    const [toEdit, setToEdit] = React.useState({});\n    const [addOpen, setAddOpen] = React.useState(false);\n    const [editOpen, setEditOpen] = React.useState(false);\n    const [deleteOpen, setDeleteOpen] = React.useState(false);\n    const [state, setState] = useState({\n        columns: [\n            { title: 'Number', field: 'number' },\n            { title: 'Opened', field: 'opened_at' },\n            { title: 'Short Description', field: 'short_description' },\n\n        ],\n        data: [\n\n        ],\n    });\n\n    const handleAddOpen = () => {\n        setAddOpen(true);\n    };\n\n    const handleAddClose = () => {\n        setAddOpen(false);\n    };\n\n    const handleEditOpen = () => {\n        setEditOpen(true);\n    };\n\n    const handleEditClose = () => {\n        setEditOpen(false);\n    };\n\n    const handleDeleteOpen = () => {\n        setDeleteOpen(true);\n    };\n\n    const handleDeleteClose = () => {\n        setDeleteOpen(false);\n    };\n\n    const loadIncidents = async () => {\n        try {\n            let response = await Snow.getIncidents();\n            setState(Object.assign(response.data.result, {}, { columns: state.columns, data: response.data.result }));\n            Logger.log(\"Loaded\", response.data.result);\n        } catch (e) {\n            Logger.log(e);\n        }\n    }\n    useEffect(() => {\n        loadIncidents();\n    }, []);\n\n    const handleUpdate = async () => {\n        try {\n            let sdesc = document.getElementById('sdesc').value;\n            let desc = document.getElementById('desc').value;\n            let response = await Snow.updateIncident(sdesc, desc, toEdit.sys_id);\n            if (response && response.status === 200) {\n                let uData = state.data.map(e => {\n                    if (e.sys_id === toEdit.sys_id) {\n                        return response.data.result\n                    }\n                    return e;\n                });\n                Logger.log(\"Updated\", response)\n                setState(Object.assign(state.data, {}, { columns: state.columns, data: uData }));\n                handleEditClose()\n                toast.error(<span><Success /> Successfully updated the incident.</span>)\n            } else {\n                handleEditClose()\n                toast.error(<span><Error /> Error updating the incident. Please try again later.</span>)\n            }\n        } catch (e) {\n            toast.error(<span><Error /> Error updating the record. Please try again later.</span>)\n            Logger.log(\"Error\", e);\n        }\n\n    }\n\n    const handleDelete = async () => {\n        try {\n            let response = await Snow.deleteIncident(toEdit.sys_id);\n            if (response && response.status === 204) {\n                let uData = state.data.filter(e => e.sys_id !== toEdit.sys_id);\n                setState(Object.assign(state.data, {}, { columns: state.columns, data: uData }));\n                handleDeleteClose()\n                toast.error(<span><Success /> Successfully deleted the incident.</span>)\n                Logger.log(\"Deleted\", response.data);\n            } else {\n                handleDeleteClose()\n                toast.error(<span><Error /> Error deleting the incident. Please try again later.</span>)\n            }\n        } catch (e) {\n            handleDeleteClose()\n            toast.error(<span><Error /> Error deleting the incident. Please try again later.</span>)\n            Logger.log(\"Error\", e);\n        }\n    }\n\n    const handleAdd = async () => {\n        try {\n            let sdesc = document.getElementById('asdesc').value;\n            let desc = document.getElementById('adesc').value;\n            let response = await Snow.addIncident(sdesc, desc)\n            if (response && response.status === 201) {\n                let uData = state.data;\n                uData.unshift(response.data.result);\n                setState(Object.assign(state.data, {}, { columns: state.columns, data: uData }));\n                handleAddClose()\n                toast.error(<span><Success /> Successfully updated the incident. width number {response.data.result.number}</span>)\n                Logger.log(\"Added\", response.data.result);\n            } else {\n                handleAddClose()\n                toast.error(<span><Error /> Error adding the incident. Please try again later.</span>)\n            }\n        } catch (e) {\n            handleAddClose()\n            toast.error(<span><Error /> Error adding the incident. Please try again later.</span>)\n            Logger.log(e);\n        }\n\n    }\n\n    return (\n        <React.Fragment>\n            <MaterialTable\n                style={{ margin: \"16px\" }}\n                title=\"Incidents\"\n                columns={state.columns}\n                data={state.data}\n                actions={[\n                    {\n                        icon: 'edit',\n                        tooltip: 'Edit incident',\n                        onClick: (event, rowData) => {\n                            setToEdit(Object.assign(toEdit, {}, rowData));\n                            handleEditOpen();\n                        }\n                    },\n                    {\n                        icon: 'delete',\n                        tooltip: 'Delete incident',\n                        onClick: (event, rowData) => {\n                            setToEdit(Object.assign(toEdit, {}, rowData));\n                            handleDeleteOpen()\n                        }\n                    }\n                ]}\n                detailPanel={rowData => {\n                    return (\n                        <React.Fragment>\n                            <Chip\n                                style={{ marginLeft: \"16px\", marginRight: \"16px\", marginTop: \"16px\" }}\n                                label={rowData.number}\n                                clickable\n                                color=\"primary\"\n                            />\n                            <Chip\n                                style={{ marginLeft: \"16px\", marginRight: \"16px\", marginTop: \"16px\" }}\n                                label={'System Id: ' + rowData.sys_id}\n                                clickable\n                                color=\"secondary\"\n                            />\n                            <Typography style={{ marginLeft: \"16px\", marginRight: \"16px\", marginTop: \"16px\" }} variant=\"h6\">\n                                {`${rowData.made_sla ? 'Yes' : 'No'} SLA was made.`}<br />\n                            </Typography>\n\n                            <Typography style={{ margin: \"16px\" }} variant=\"h6\">\n                                {`${rowData.description}`}\n                            </Typography>\n\n                        </React.Fragment>\n\n                    )\n                }}\n                onRowClick={(event, rowData, togglePanel) => togglePanel()}\n\n                options={{\n                    actionsColumnIndex: -1\n                }}\n                components={{\n                    Toolbar: props => (\n                        <div>\n                            <MTableToolbar {...props} />\n                            <IconButton aria-label=\"Add\" onClick={handleAddOpen} style={{ backgroundColor: \"#1976d2\", color: \"white\" }} tooltip=\"Add incident\">\n                                <AddIcon />\n                            </IconButton>\n                        </div>\n                    ),\n                }}\n            />\n            {/* For Updating */}\n            <Dialog open={editOpen} onClose={handleEditClose} aria-labelledby=\"form-dialog-title\">\n                <DialogTitle id=\"form-dialog-title\">Edit: {toEdit ? toEdit.number : \"\"}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText>\n                        Please modify the following details.\n                    </DialogContentText>\n                    <TextField\n                        defaultValue={toEdit ? toEdit.short_description : \"\"}\n                        autoFocus\n                        margin=\"dense\"\n                        id=\"sdesc\"\n                        label=\"Short Description\"\n                        type=\"text\"\n                        fullWidth\n                        variant=\"outlined\"\n                    />\n                    <TextField\n                        defaultValue={toEdit ? toEdit.description : \"\"}\n                        style={{ marginTop: \"16px\" }}\n                        autoFocus\n                        margin=\"dense\"\n                        id=\"desc\"\n                        label=\"Description\"\n                        type=\"text\"\n                        fullWidth\n                        multiline\n                        variant=\"outlined\"\n                    />\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleEditClose} color=\"primary\">\n                        Cancel\n                    </Button>\n                    <Button onClick={handleUpdate} color=\"primary\">\n                        Update\n                    </Button>\n                </DialogActions>\n            </Dialog>\n            {/* For Delete Confirmation */}\n            <Dialog\n                open={deleteOpen}\n                onClose={handleDeleteClose}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n            >\n                <DialogTitle id=\"alert-dialog-title\">{\"Delete Incident?\"}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText id=\"alert-dialog-description\">\n                        Are you sure you want to delete this incident?\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleDeleteClose} color=\"primary\">\n                        No\n                    </Button>\n                    <Button onClick={handleDelete} color=\"primary\" autoFocus>\n                        Yes\n                    </Button>\n                </DialogActions>\n            </Dialog>\n            {/* For Adding New Incident Record */}\n            <Dialog open={addOpen} onClose={handleAddClose} aria-labelledby=\"form-dialog-title\">\n                <DialogTitle id=\"form-dialog-title\">Add incident</DialogTitle>\n                <DialogContent>\n                    <DialogContentText>\n                        Please fill the following details.\n                    </DialogContentText>\n                    <TextField\n                        autoFocus\n                        margin=\"dense\"\n                        id=\"asdesc\"\n                        label=\"Short Description\"\n                        type=\"text\"\n                        fullWidth\n                        variant=\"outlined\"\n                    />\n                    <TextField\n                        style={{ marginTop: \"16px\" }}\n                        autoFocus\n                        margin=\"dense\"\n                        id=\"adesc\"\n                        label=\"Description\"\n                        type=\"text\"\n                        fullWidth\n                        multiline\n                        variant=\"outlined\"\n                    />\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleAddClose} color=\"primary\">\n                        Cancel\n                    </Button>\n                    <Button onClick={handleAdd} color=\"primary\">\n                        Add\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </React.Fragment>\n    );\n\n\n}\n","import React from 'react'\nimport ButtonAppBar from './ButtonAppBar'\nimport Incidents from './Incidents'\n\nexport default function Dashboard(props) {\n\n    const loggedIn = props.globalState.isLoggedIn();\n    if (!loggedIn) props.history.push('/');\n    return (\n        <React.Fragment>\n            <ButtonAppBar />\n            <Incidents {...props} />\n        </React.Fragment>\n    )\n}","import React, { useState } from 'react'\nimport TextField from '@material-ui/core/TextField'\nimport Paper from '@material-ui/core/Paper'\nimport Grid from '@material-ui/core/Grid'\nimport Button from '@material-ui/core/Button'\nimport LinearProgress from '@material-ui/core/LinearProgress'\nimport ButtonAppBar from './ButtonAppBar'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { toast } from 'react-toastify'\nimport Error from '@material-ui/icons/Error'\nimport Snow from '../services/Snow'\nimport Logger from '../services/Logger'\n\nconst useStyles = makeStyles(theme => ({\n  container: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    margin: \"16px\"\n  },\n  input: {\n    margin: theme.spacing(1),\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n}));\n\nexport default function Login(props) {\n  const classes = useStyles();\n  const [loading, setLoading] = useState(false);\n  let loggedIn = props.globalState.isLoggedIn();\n  if (loggedIn) props.history.push('/dashboard');\n  async function handleClick(e) {\n    e.preventDefault();\n    setLoading(true);\n    let username = document.getElementById('username').value;\n    let password = document.getElementById('password').value;\n    let instanceId = document.getElementById('instanceId').value;\n    try {\n      let res = await Snow.login(username, password, instanceId)\n      if (res.status === 200) {\n        props.globalState.setLoggedIn(true);\n        props.globalState.username = username;\n        props.globalState.password = password;\n        props.globalState.instanceId = instanceId;\n        toast.success(<span>Logged in!</span>);\n        setLoading(false)\n        props.history.push('/dashboard')\n      }\n      Logger.log('Authenticated', res);\n    } catch (e) {\n      toast.error(<span><Error /> Login failed!!</span>);\n      setLoading(false)\n      Logger.log(\"Error\", e);\n    }\n  }\n\n  return (\n    <React.Fragment>\n      <ButtonAppBar />\n      <form className={classes.container} style={{ justifyContent: \"center\", alignItems: \"center\" }} noValidate autoComplete=\"off\">\n        <Paper className={classes.paper} style={{ width: \"500px\" }}>\n          <Grid container spacing={1} direction=\"column\" >\n            <Grid item xs={12}>\n              <TextField\n                style={{ width: \"100%\" }}\n                id=\"username\"\n                label=\"Username\"\n                className={classes.textField}\n                type=\"text\"\n                name=\"username\"\n                autoComplete=\"email\"\n                margin=\"normal\"\n                variant=\"outlined\"\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                style={{ width: \"100%\" }}\n                id=\"password\"\n                label=\"Password\"\n                className={classes.textField}\n                type=\"password\"\n                name=\"pwd\"\n                margin=\"normal\"\n                variant=\"outlined\"\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                style={{ width: \"100%\" }}\n                id=\"instanceId\"\n                defaultValue=\"dev78916\"\n                label=\"Instance name\"\n                className={classes.textField}\n                type=\"email\"\n                name=\"email\"\n                autoComplete=\"email\"\n                margin=\"normal\"\n                variant=\"outlined\"\n              />\n            </Grid>\n            <Grid item xs={12} style={{ display: \"flex\", justifyContent: \"center\", alignItems: \"center\", flexDirection: \"column\" }}>\n              <Button style={{ width: \"100%\", margin: '0' }} disabled={loading ? true : false} variant=\"contained\" color=\"primary\" size=\"large\" className={classes.button} onClick={handleClick}>\n                Login\n            </Button>\n              {loading ?\n                <LinearProgress variant=\"query\" style={{ width: \"100%\", margin: '0' }} />\n                : \"\"\n              }\n            </Grid>\n          </Grid>\n        </Paper>\n      </form>\n    </React.Fragment>\n  );\n}","import React from 'react';\nimport './App.css';\nimport Dashboard from './components/Dashboard';\nimport { HashRouter } from \"react-router-dom\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Login from './components/Login';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { ToastContainer, toast } from 'react-toastify';\n\nfunction App(aprops) {\n  return (\n    <HashRouter basename=\"/\">\n      <div className=\"App\">\n        <React.Fragment>\n          <Switch>\n            <Route path=\"/\" exact render={(props) => <Login {...props} globalState={aprops.globalState} />} />\n            <Route path=\"/dashboard\" render={(props) => <Dashboard {...props} globalState={aprops.globalState} />} />\n          </Switch>\n          <ToastContainer position={toast.POSITION.TOP_RIGHT} autoClose={5000} />\n        </React.Fragment>\n      </div>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'typeface-roboto';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport GlobalState from './services/GlobalState'\nReactDOM.render(<App globalState={GlobalState} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}