{"version":3,"sources":["components/ButtonAppBar.js","components/Incidents.js","components/Dashboard.js","components/Login.js","App.js","serviceWorker.js","index.js","services/GlobalState.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","content","padding","ButtonAppBar","props","classes","className","AppBar","position","Toolbar","Typography","variant","Incidents","globalState","username","password","instance","useState","columns","field","data","state","setState","loadIncidents","a","Axios","get","auth","response","Object","assign","result","console","log","status","useEffect","style","margin","actions","icon","tooltip","onClick","event","rowData","alert","number","detailPanel","Fragment","Chip","marginLeft","marginTop","label","clickable","color","sys_id","made_sla","description","onRowClick","togglePanel","editable","onRowAdd","newData","Promise","resolve","reject","btoa","post","short_description","setTimeout","push","onRowUpdate","oldData","indexOf","onRowDelete","splice","options","actionsColumnIndex","Dashboard","isLoggedIn","history","container","display","flexWrap","input","paper","textAlign","palette","text","secondary","button","Login","loading","setLoading","e","preventDefault","document","getElementById","value","instanceId","url","method","axios","then","val","res","raw","setLoggedIn","rej","toast","error","justifyContent","alignItems","noValidate","autoComplete","Paper","width","Grid","direction","item","xs","TextField","id","textField","type","name","defaultValue","flexDirection","Button","disabled","size","LinearProgress","App","aprops","basename","path","exact","render","POSITION","TOP_RIGHT","autoClose","Boolean","window","location","hostname","match","loggedIn","this","undefined","ReactDOM","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.881b662c.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n// import Button from '@material-ui/core/Button';\n// import IconButton from '@material-ui/core/IconButton';\n// import MenuIcon from '@material-ui/icons/Menu';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n  }\n}));\n\nexport default function ButtonAppBar(props) {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title}>\n            SNOW Client\n          </Typography>\n          {/* <Button color=\"inherit\">Login</Button> */}\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport MaterialTable from 'material-table';\nimport Axios from 'axios';\nimport Typography from '@material-ui/core/Typography'\nimport Chip from '@material-ui/core/Chip'\nimport { toast } from 'react-toastify'\n\nexport default function Incidents(props) {\n\n    const globalState = props.globalState;\n    const username = globalState.username;\n    const password = globalState.password;\n    const instance = globalState.instance;\n    const [state, setState] = useState({\n        columns: [\n            { title: 'Number', field: 'number' },\n            { title: 'Opened', field: 'opened_at' },\n            { title: 'Short Description', field: 'short_description' },\n\n        ],\n        data: [\n\n        ],\n    });\n    const loadIncidents = async () => {\n        try {\n            let response = await Axios.get(`https://${instance}.service-now.com/api/now/table/incident?sysparm_limit=20&sysparm_query=active=true`, {\n                auth: {\n                    username: username,\n                    password: password\n                }\n            });\n            setState(Object.assign(response.data.result, {}, { columns: state.columns, data: response.data.result }));\n            console.log(response.status, response.data.result);\n        } catch (e) {\n            console.log(e);\n        }\n    }\n    useEffect(() => {\n        loadIncidents();\n    }, []);\n\n    return (\n        <MaterialTable\n            style={{ margin: \"16px\" }}\n            title=\"Incidents\"\n            columns={state.columns}\n            data={state.data}\n            actions={[\n                {\n                  icon: 'edit',\n                  tooltip: 'Edit incident',\n                  onClick: (event, rowData) => alert(\"You edited \" + rowData.number)\n                }\n              ]}\n            detailPanel={rowData => {\n                return (\n                    <React.Fragment>\n                        <Chip\n                            style={{ marginLeft: \"16px\", marginRight: \"16px\", marginTop: \"16px\" }}\n                            label={rowData.number}\n                            clickable\n                            color=\"primary\"\n                        />\n                        <Chip\n                            style={{ marginLeft: \"16px\", marginRight: \"16px\", marginTop: \"16px\" }}\n                            label={'System Id: ' + rowData.sys_id}\n                            clickable\n                            color=\"secondary\"\n                        />\n                        <Typography style={{ marginLeft: \"16px\", marginRight: \"16px\", marginTop: \"16px\" }} variant=\"h6\">\n                            {`${rowData.made_sla ? 'Yes' : 'No'} SLA was made.`}<br />\n                        </Typography>\n\n                        <Typography style={{ margin: \"16px\" }} variant=\"h6\">\n                            {`${rowData.description}`}\n                        </Typography>\n\n                    </React.Fragment>\n\n                )\n            }}\n            onRowClick={(event, rowData, togglePanel) => togglePanel()}\n            editable={{\n                onRowAdd: newData =>\n                    new Promise(async (resolve, reject) => {\n                        try {\n                            const basicAuth = 'Basic ' + btoa(username + ':' + password);\n                            let response = await Axios.post(`https://${instance}.service-now.com/api/now/table/incident`,\n                                {\n                                    short_description: newData.short_description,\n                                },\n                                {\n                                    auth: {\n                                        username: username,\n                                        password: password\n                                    }\n                                });\n                        } catch (e) {\n\n                        }\n                        setTimeout(() => {\n                            resolve();\n                            const data = [...state.data];\n                            data.push(newData);\n                            setState({ ...state, data });\n                        }, 600);\n                    }),\n                onRowUpdate: (newData, oldData) =>\n                    new Promise(resolve => {\n                        setTimeout(() => {\n                            resolve();\n                            const data = [...state.data];\n                            data[data.indexOf(oldData)] = newData;\n                            setState({ ...state, data });\n                        }, 600);\n                    }),\n                onRowDelete: oldData =>\n                    new Promise(resolve => {\n                        setTimeout(() => {\n                            resolve();\n                            const data = [...state.data];\n                            data.splice(data.indexOf(oldData), 1);\n                            setState({ ...state, data });\n                        }, 600);\n                    }),\n            }}\n            options={{\n                actionsColumnIndex: -1\n            }}\n        />\n    );\n}\n","import React from 'react'\nimport ButtonAppBar from './ButtonAppBar'\nimport Incidents from './Incidents'\n\nexport default function Dashboard(props) {\n\n    const loggedIn = props.globalState.isLoggedIn();\n    if (!loggedIn) props.history.push('/');\n    // console.log(\"Logged In = \" + props.globalState.isLoggedIn)\n    return (\n        <React.Fragment>\n            <ButtonAppBar />\n            <Incidents {...props} />\n        </React.Fragment>\n    )\n}","import React, { useState } from 'react'\nimport TextField from '@material-ui/core/TextField'\nimport Paper from '@material-ui/core/Paper'\nimport Grid from '@material-ui/core/Grid'\nimport Button from '@material-ui/core/Button'\nimport LinearProgress from '@material-ui/core/LinearProgress'\nimport ButtonAppBar from './ButtonAppBar'\nimport axios from 'axios'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { toast } from 'react-toastify'\nimport Error from '@material-ui/icons/Error'\n\nconst useStyles = makeStyles(theme => ({\n  container: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    margin: \"16px\"\n  },\n  input: {\n    margin: theme.spacing(1),\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n}));\n\nexport default function Login(props) {\n  const classes = useStyles();\n  const [loading, setLoading] = useState(false);\n  let loggedIn = props.globalState.isLoggedIn();\n  if (loggedIn) props.history.push('/dashboard');\n  async function handleClick(e) {\n    e.preventDefault();\n    setLoading(true);\n    let username = document.getElementById('username').value;\n    let password = document.getElementById('password').value;\n    let instanceId = document.getElementById('instanceId').value;\n    try {\n      const options = {\n        url: `https://${instanceId}.service-now.com/api/now/v2/table/sys_user?user_name=${username}`,\n        method: 'get',\n        auth: {\n          username: `${username}`,\n          password: `${password}`\n        }\n      };\n      axios(options).then((val) => {\n        setLoading(false)\n        var res = {\n          raw: val,\n          status: val.status\n        }\n        if (val.status === 200) {\n          props.globalState.setLoggedIn(true);\n          props.globalState.username = username;\n          props.globalState.password = password;\n          props.globalState.instance = instanceId;\n          props.history.push('/dashboard')\n        }\n        console.log('Authenticated', res);\n      }, (rej) => {\n        toast.error(<div><Error /> Login failed!!</div>);\n        setLoading(false)\n        console.log(rej);\n      });\n    } catch (e) {\n      console.log(e)\n    }\n\n  }\n\n  return (\n    <React.Fragment>\n      <ButtonAppBar />\n      <form className={classes.container} style={{ justifyContent: \"center\", alignItems: \"center\" }} noValidate autoComplete=\"off\">\n        <Paper className={classes.paper} style={{ width: \"500px\" }}>\n          <Grid container spacing={1} direction=\"column\" >\n            <Grid item xs={12}>\n              <TextField\n                style={{ width: \"100%\" }}\n                id=\"username\"\n                label=\"Username\"\n                className={classes.textField}\n                type=\"text\"\n                name=\"username\"\n                autoComplete=\"email\"\n                margin=\"normal\"\n                variant=\"outlined\"\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                style={{ width: \"100%\" }}\n                id=\"password\"\n                label=\"Password\"\n                className={classes.textField}\n                type=\"password\"\n                name=\"pwd\"\n                margin=\"normal\"\n                variant=\"outlined\"\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                style={{ width: \"100%\" }}\n                id=\"instanceId\"\n                defaultValue=\"dev78916\"\n                label=\"Instance name\"\n                className={classes.textField}\n                type=\"email\"\n                name=\"email\"\n                autoComplete=\"email\"\n                margin=\"normal\"\n                variant=\"outlined\"\n              />\n            </Grid>\n            <Grid item xs={12} style={{ display: \"flex\", justifyContent: \"center\", alignItems: \"center\", flexDirection: \"column\" }}>\n              <Button style={{ width: \"100%\", margin: '0' }} disabled={loading ? true : false} variant=\"contained\" color=\"primary\" size=\"large\" className={classes.button} onClick={handleClick}>\n                Login\n            </Button>\n              {loading ?\n                <LinearProgress variant=\"query\" style={{ width: \"100%\", margin: '0' }} />\n                : \"\"\n              }\n            </Grid>\n          </Grid>\n        </Paper>\n      </form>\n    </React.Fragment>\n  );\n}","import React from 'react';\nimport './App.css';\nimport Dashboard from './components/Dashboard';\nimport { HashRouter } from \"react-router-dom\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Login from './components/Login';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { ToastContainer, toast } from 'react-toastify';\n\nfunction App(aprops) {\n  // console.log(aprops.globalState)\n  return (\n    <HashRouter basename=\"/\">\n      <div className=\"App\">\n        <React.Fragment>\n          <Switch>\n            <Route path=\"/\" exact render={(props) => <Login {...props} globalState={aprops.globalState} />} />\n            <Route path=\"/dashboard\" render={(props) => <Dashboard {...props} globalState={aprops.globalState} />} />\n          </Switch>\n          <ToastContainer position={toast.POSITION.TOP_RIGHT} autoClose={5000} />\n        </React.Fragment>\n      </div>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'typeface-roboto';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport GlobalState from './services/GlobalState'\nconst globalState = new GlobalState(false);\nReactDOM.render(<App globalState={globalState} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","\nexport default class GlobalState {\n\n    constructor(loggedIn) {\n        this.loggedIn = loggedIn;\n        this.username = undefined;\n        this.password = undefined;\n        this.instance = undefined;\n    }\n\n    setLoggedIn = (loggedIn) => {\n        this.loggedIn = loggedIn;\n    }\n\n    isLoggedIn = () => {\n        return this.loggedIn;\n    }\n}"],"sourceRoot":""}