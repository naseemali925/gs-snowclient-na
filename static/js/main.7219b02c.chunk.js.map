{"version":3,"sources":["components/MiniDrawer.js","components/Login.js","components/ButtonAppBar.js","App.js","serviceWorker.js","index.js"],"names":["makeStyles","theme","root","display","appBar","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","width","enteringScreen","menuButton","marginRight","hide","flexShrink","whiteSpace","drawerOpen","drawerClose","overflowX","spacing","breakpoints","up","toolbar","alignItems","justifyContent","padding","mixins","content","flexGrow","useStyles","container","flexWrap","margin","input","paper","textAlign","color","palette","text","secondary","button","Login","classes","e","a","preventDefault","username","document","getElementById","value","password","instanceId","options","url","method","auth","axios","then","val","res","raw","status","console","log","rej","className","style","noValidate","autoComplete","Paper","Grid","direction","item","xs","TextField","id","label","textField","type","name","variant","defaultValue","Button","size","onClick","title","ButtonAppBar","AppBar","position","Toolbar","Typography","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7219b02c.chunk.js","sourcesContent":["import React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport List from '@material-ui/core/List';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\nimport MailIcon from '@material-ui/icons/Mail';\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    marginLeft: drawerWidth,\n    width: `calc(100% - ${drawerWidth}px)`,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  menuButton: {\n    marginRight: 36,\n  },\n  hide: {\n    display: 'none',\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n    whiteSpace: 'nowrap',\n  },\n  drawerOpen: {\n    width: drawerWidth,\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  drawerClose: {\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    overflowX: 'hidden',\n    width: theme.spacing(7) + 1,\n    [theme.breakpoints.up('sm')]: {\n      width: theme.spacing(9) + 1,\n    },\n  },\n  toolbar: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'flex-end',\n    padding: theme.spacing(0, 1),\n    ...theme.mixins.toolbar,\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n  },\n}));\n\nexport default function MiniDrawer() {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [open, setOpen] = React.useState(false);\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar\n        position=\"fixed\"\n        className={clsx(classes.appBar, {\n          [classes.appBarShift]: open,\n        })}\n      >\n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={handleDrawerOpen}\n            edge=\"start\"\n            className={clsx(classes.menuButton, {\n              [classes.hide]: open,\n            })}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" noWrap>\n            SNOW Client\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Drawer\n        variant=\"permanent\"\n        className={clsx(classes.drawer, {\n          [classes.drawerOpen]: open,\n          [classes.drawerClose]: !open,\n        })}\n        classes={{\n          paper: clsx({\n            [classes.drawerOpen]: open,\n            [classes.drawerClose]: !open,\n          }),\n        }}\n        open={open}\n      >\n        <div className={classes.toolbar}>\n          <IconButton onClick={handleDrawerClose}>\n            {theme.direction === 'rtl' ? <ChevronRightIcon /> : <ChevronLeftIcon />}\n          </IconButton>\n        </div>\n        <Divider />\n        <List>\n          {['Inbox', 'Starred', 'Send email', 'Drafts'].map((text, index) => (\n            <ListItem button key={text}>\n              <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\n              <ListItemText primary={text} />\n            </ListItem>\n          ))}\n        </List>\n        <Divider />\n        <List>\n          {['All mail', 'Trash', 'Spam'].map((text, index) => (\n            <ListItem button key={text}>\n              <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\n              <ListItemText primary={text} />\n            </ListItem>\n          ))}\n        </List>\n      </Drawer>\n      <main className={classes.content}>\n        <div className={classes.toolbar} />\n        <Typography paragraph>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt\n          ut labore et dolore magna aliqua. Rhoncus dolor purus non enim praesent elementum\n          facilisis leo vel. Risus at ultrices mi tempus imperdiet. Semper risus in hendrerit\n          gravida rutrum quisque non tellus. Convallis convallis tellus id interdum velit laoreet id\n          donec ultrices. Odio morbi quis commodo odio aenean sed adipiscing. Amet nisl suscipit\n          adipiscing bibendum est ultricies integer quis. Cursus euismod quis viverra nibh cras.\n          Metus vulputate eu scelerisque felis imperdiet proin fermentum leo. Mauris commodo quis\n          imperdiet massa tincidunt. Cras tincidunt lobortis feugiat vivamus at augue. At augue eget\n          arcu dictum varius duis at consectetur lorem. Velit sed ullamcorper morbi tincidunt. Lorem\n          donec massa sapien faucibus et molestie ac.\n        </Typography>\n        <Typography paragraph>\n          Consequat mauris nunc congue nisi vitae suscipit. Fringilla est ullamcorper eget nulla\n          facilisi etiam dignissim diam. Pulvinar elementum integer enim neque volutpat ac\n          tincidunt. Ornare suspendisse sed nisi lacus sed viverra tellus. Purus sit amet volutpat\n          consequat mauris. Elementum eu facilisis sed odio morbi. Euismod lacinia at quis risus sed\n          vulputate odio. Morbi tincidunt ornare massa eget egestas purus viverra accumsan in. In\n          hendrerit gravida rutrum quisque non tellus orci ac. Pellentesque nec nam aliquam sem et\n          tortor. Habitant morbi tristique senectus et. Adipiscing elit duis tristique sollicitudin\n          nibh sit. Ornare aenean euismod elementum nisi quis eleifend. Commodo viverra maecenas\n          accumsan lacus vel facilisis. Nulla posuere sollicitudin aliquam ultrices sagittis orci a.\n        </Typography>\n      </main>\n    </div>\n  );\n}\n","import React from 'react'\nimport TextField from '@material-ui/core/TextField'\nimport Paper from '@material-ui/core/Paper'\nimport Grid from '@material-ui/core/Grid'\nimport Button from '@material-ui/core/Button'\nimport axios from 'axios'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles(theme => ({\n  container: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    margin: \"16px\"\n  },\n  input: {\n    margin: theme.spacing(1),\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n}));\n\nexport default function Login() {\n  const classes = useStyles();\n\n  async function handleClick(e) {\n    e.preventDefault();\n    let username = document.getElementById('username').value;\n    let password = document.getElementById('password').value;\n    let instanceId = document.getElementById('instanceId').value;\n    try {\n      const options={\n        url:`https://${instanceId}.service-now.com/api/now/v2/table/sys_user?user_name=${username}`,\n        method:'get',\n        auth:{\n            username:`${username}`,\n            password:`${password}`\n        }\n    };\n    axios(options).then((val)=>{\n        var res={\n            raw:val,\n            status:val.status\n        }\n        console.log('Authenticated', res);\n    },(rej)=>{\n        console.log(rej);\n    });\n    } catch (e) {\n      console.log(e)\n    }\n    \n  }\n\n  return (\n    <form className={classes.container} style={{ justifyContent: \"center\", alignItems: \"center\" }} noValidate autoComplete=\"off\">\n      <Paper className={classes.paper} style={{ width: \"500px\" }}>\n        <Grid container spacing={1} direction=\"column\" >\n          <Grid item xs={12}>\n            <TextField\n              style={{ width: \"100%\" }}\n              id=\"username\"\n              label=\"Username\"\n              className={classes.textField}\n              type=\"text\"\n              name=\"username\"\n              autoComplete=\"email\"\n              margin=\"normal\"\n              variant=\"outlined\"\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <TextField\n              style={{ width: \"100%\" }}\n              id=\"password\"\n              label=\"Password\"\n              className={classes.textField}\n              type=\"password\"\n              name=\"pwd\"\n              margin=\"normal\"\n              variant=\"outlined\"\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <TextField\n              style={{ width: \"100%\" }}\n              id=\"instanceId\"\n              defaultValue=\"dev78916.service-now.com\"\n              label=\"Instance name\"\n              className={classes.textField}\n              type=\"email\"\n              name=\"email\"\n              autoComplete=\"email\"\n              margin=\"normal\"\n              variant=\"outlined\"\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <Button variant=\"contained\" color=\"primary\" size=\"medium\" className={classes.button} onClick={handleClick}>\n              Login\n            </Button>\n          </Grid>\n        </Grid>\n      </Paper>\n    </form>\n\n  );\n}","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Login from './Login';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n  }\n}));\n\nexport default function ButtonAppBar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          {/* <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n            <MenuIcon />\n          </IconButton> */}\n          <Typography variant=\"h6\" className={classes.title}>\n            SNOW Client\n          </Typography>\n          {/* <Button color=\"inherit\">Login</Button> */}\n        </Toolbar>\n      </AppBar>\n      <Login className={classes.content}/>\n    </div>\n  );\n}\n","import React from 'react';\nimport './App.css';\nimport MiniDrawer from './components/MiniDrawer';\nimport ButtonAppBar from './components/ButtonAppBar';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     {/* <MiniDrawer/> */}\n     <ButtonAppBar/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'typeface-roboto';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}