{"version":3,"sources":["components/ButtonAppBar.js","components/Dashboard.js","components/Login.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","content","padding","ButtonAppBar","classes","className","AppBar","position","Toolbar","Typography","variant","Dashboard","Fragment","container","display","flexWrap","margin","input","paper","textAlign","color","palette","text","secondary","button","Login","props","e","a","preventDefault","username","document","getElementById","value","password","instanceId","options","url","method","auth","axios","then","val","res","raw","status","history","push","console","log","rej","style","justifyContent","alignItems","noValidate","autoComplete","Paper","width","Grid","direction","item","xs","TextField","id","label","textField","type","name","defaultValue","Button","size","onClick","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b5312102.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n// import Button from '@material-ui/core/Button';\n// import IconButton from '@material-ui/core/IconButton';\n// import MenuIcon from '@material-ui/icons/Menu';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n  }\n}));\n\nexport default function ButtonAppBar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title}>\n            SNOW Client\n          </Typography>\n          {/* <Button color=\"inherit\">Login</Button> */}\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n","import React from 'react'\nimport ButtonAppBar from './ButtonAppBar'\n\nexport default function Dashboard(){\n\n    return(\n        <React.Fragment>\n            <ButtonAppBar/>\n        </React.Fragment>\n    )\n}","import React from 'react'\nimport TextField from '@material-ui/core/TextField'\nimport Paper from '@material-ui/core/Paper'\nimport Grid from '@material-ui/core/Grid'\nimport Button from '@material-ui/core/Button'\nimport ButtonAppBar from './ButtonAppBar'\nimport axios from 'axios'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles(theme => ({\n  container: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    margin: \"16px\"\n  },\n  input: {\n    margin: theme.spacing(1),\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n}));\n\nexport default function Login({ props }) {\n  const classes = useStyles();\n\n  async function handleClick(e) {\n    e.preventDefault();\n    let username = document.getElementById('username').value;\n    let password = document.getElementById('password').value;\n    let instanceId = document.getElementById('instanceId').value;\n    try {\n      const options = {\n        url: `https://${instanceId}.service-now.com/api/now/v2/table/sys_user?user_name=${username}`,\n        method: 'get',\n        auth: {\n          username: `${username}`,\n          password: `${password}`\n        }\n      };\n      axios(options).then((val) => {\n        var res = {\n          raw: val,\n          status: val.status\n        }\n        if (val.status) {\n          props.history.push('/dashboard')\n        }\n        console.log('Authenticated', res);\n      }, (rej) => {\n        console.log(rej);\n      });\n    } catch (e) {\n      console.log(e)\n    }\n\n  }\n\n  return (\n    <React.Fragment>\n      <ButtonAppBar />\n      <form className={classes.container} style={{ justifyContent: \"center\", alignItems: \"center\" }} noValidate autoComplete=\"off\">\n        <Paper className={classes.paper} style={{ width: \"500px\" }}>\n          <Grid container spacing={1} direction=\"column\" >\n            <Grid item xs={12}>\n              <TextField\n                style={{ width: \"100%\" }}\n                id=\"username\"\n                label=\"Username\"\n                className={classes.textField}\n                type=\"text\"\n                name=\"username\"\n                autoComplete=\"email\"\n                margin=\"normal\"\n                variant=\"outlined\"\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                style={{ width: \"100%\" }}\n                id=\"password\"\n                label=\"Password\"\n                className={classes.textField}\n                type=\"password\"\n                name=\"pwd\"\n                margin=\"normal\"\n                variant=\"outlined\"\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                style={{ width: \"100%\" }}\n                id=\"instanceId\"\n                defaultValue=\"dev78916\"\n                label=\"Instance name\"\n                className={classes.textField}\n                type=\"email\"\n                name=\"email\"\n                autoComplete=\"email\"\n                margin=\"normal\"\n                variant=\"outlined\"\n              />\n            </Grid>\n            <Grid item xs={12} style={{ display: \"flex\", justifyContent: \"center\", alignItems: \"center\" }}>\n              <Button style={{ width: \"100%\", margin: '0' }} variant=\"contained\" color=\"primary\" size=\"large\" className={classes.button} onClick={handleClick}>\n                Login\n            </Button>\n            </Grid>\n          </Grid>\n        </Paper>\n      </form>\n    </React.Fragment>\n  );\n}","import React from 'react';\nimport './App.css';\nimport Dashboard from './components/Dashboard';\nimport { HashRouter } from \"react-router-dom\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Login from './components/Login';\n\nfunction App() {\n  return (\n    <HashRouter>\n      <div className=\"App\">\n        <React.Fragment>\n          <Switch>\n            <Route path=\"/\" exact component={Login} />\n            <Route path=\"/dashboard\" component={Dashboard} />\n          </Switch>\n        </React.Fragment>\n      </div>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'typeface-roboto';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}