{"version":3,"sources":["components/ButtonAppBar.js","components/Incidents.js","components/Dashboard.js","services/GlobalState.js","services/Snow.js","services/Logger.js","components/Login.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","content","padding","ButtonAppBar","props","classes","className","AppBar","position","Typography","variant","Incidents","globalState","username","password","instance","instanceId","React","useState","toEdit","setToEdit","addOpen","setAddOpen","handleAddOpen","handleAddClose","editOpen","setEditOpen","handleEditClose","deleteOpen","setDeleteOpen","handleDeleteClose","columns","field","data","state","setState","loadIncidents","a","Axios","get","auth","response","Object","assign","result","console","log","useEffect","handleUpdate","sdesc","document","getElementById","value","desc","put","sys_id","short_description","description","status","uData","map","e","toast","success","error","handleDelete","delete","filter","handleAdd","post","unshift","number","Fragment","style","margin","actions","icon","tooltip","onClick","event","rowData","detailPanel","Chip","marginLeft","marginTop","label","clickable","color","made_sla","onRowClick","togglePanel","options","actionsColumnIndex","components","Toolbar","IconButton","aria-label","backgroundColor","Dialog","open","onClose","aria-labelledby","DialogTitle","id","DialogContent","DialogContentText","TextField","defaultValue","autoFocus","type","fullWidth","multiline","DialogActions","Button","aria-describedby","Dashboard","isLoggedIn","history","push","loggedIn","setLoggedIn","GlobalState","this","undefined","login","BASE","loginPath","PATHS","LOGIN","Promise","resolve","reject","url","method","then","val","rej","getIncidents","incidentsPath","INCIDENTS","Snow","USER_NAME","PASSWORD","forEach","item","container","display","flexWrap","input","paper","textAlign","palette","text","secondary","button","Login","loading","setLoading","preventDefault","res","Logger","justifyContent","alignItems","noValidate","autoComplete","Paper","width","Grid","direction","xs","textField","name","flexDirection","disabled","size","LinearProgress","App","aprops","basename","path","exact","render","POSITION","TOP_RIGHT","autoClose","Boolean","window","location","hostname","match","ReactDOM","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.297d2419.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n// import Button from '@material-ui/core/Button';\n// import IconButton from '@material-ui/core/IconButton';\n// import MenuIcon from '@material-ui/icons/Menu';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n  }\n}));\n\nexport default function ButtonAppBar(props) {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title}>\n            SNOW Client\n          </Typography>\n          {/* <Button color=\"inherit\">Login</Button> */}\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport MaterialTable, { MTableToolbar } from 'material-table';\nimport Axios from 'axios';\nimport Typography from '@material-ui/core/Typography'\nimport Chip from '@material-ui/core/Chip'\nimport Button from '@material-ui/core/Button'\nimport TextField from '@material-ui/core/TextField'\nimport { toast } from 'react-toastify'\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport IconButton from '@material-ui/core/IconButton';\nimport AddIcon from '@material-ui/icons/Add'\n\nexport default function Incidents(props) {\n\n    const globalState = props.globalState;\n    const username = globalState.username;\n    const password = globalState.password;\n    const instance = globalState.instanceId;\n    const [toEdit, setToEdit] = React.useState({});\n    const [addOpen, setAddOpen] = React.useState(false);\n    const handleAddOpen = () => {\n        setAddOpen(true);\n    };\n\n    const handleAddClose = () => {\n        setAddOpen(false);\n    };\n    const [editOpen, setEditOpen] = React.useState(false);\n\n    const handleEditOpen = () => {\n        setEditOpen(true);\n    };\n\n    const handleEditClose = () => {\n        setEditOpen(false);\n    };\n    const [deleteOpen, setDeleteOpen] = React.useState(false);\n\n    const handleDeleteOpen = () => {\n        setDeleteOpen(true);\n    };\n\n    const handleDeleteClose = () => {\n        setDeleteOpen(false);\n    };\n    const [state, setState] = useState({\n        columns: [\n            { title: 'Number', field: 'number' },\n            { title: 'Opened', field: 'opened_at' },\n            { title: 'Short Description', field: 'short_description' },\n\n        ],\n        data: [\n\n        ],\n    });\n    const loadIncidents = async () => {\n        try {\n            let response = await Axios.get(`https://${instance}.service-now.com/api/now/table/incident?sysparm_limit=20&sysparm_query=active=true`, {\n                auth: {\n                    username: username,\n                    password: password\n                }\n            });\n            setState(Object.assign(response.data.result, {}, { columns: state.columns, data: response.data.result }));\n            // console.log(response.status, response.data.result);\n        } catch (e) {\n            console.log(e);\n        }\n    }\n    useEffect(() => {\n        loadIncidents();\n    }, []);\n\n    const handleUpdate = async () => {\n        try {\n            let sdesc = document.getElementById('sdesc').value;\n            let desc = document.getElementById('desc').value;\n            let response = await Axios.put(`https://${instance}.service-now.com/api/now/table/incident/${toEdit.sys_id}`,\n                {\n                    short_description: sdesc,\n                    description: desc\n                }, {\n                auth: {\n                    username: username,\n                    password: password\n                }\n            })\n            if (response && response.status === 200) {\n                let uData = state.data.map(e => {\n                    if (e.sys_id === toEdit.sys_id) {\n                        return response.data.result\n                    }\n                    return e;\n                });\n                // console.log(\"Updated\", response)\n                setState(Object.assign(state.data, {}, { columns: state.columns, data: uData }));\n                handleEditClose()\n                toast.success(\"Incident successfuly updated.\")\n            } else {\n                handleEditClose()\n                toast.error(\"Some Error Occured While updated the incident\")\n            }\n        } catch (e) {\n            toast.error(\"Error Updating The Record. Please try again later.\")\n        }\n    }\n\n    const handleDelete = async () => {\n        try {\n            let response = await Axios.delete(`https://${instance}.service-now.com/api/now/table/incident/${toEdit.sys_id}`,\n                {\n                    auth: {\n                        username: username,\n                        password: password\n                    }\n                }, {})\n            // console.log(\"Delete response\", response)\n            if (response && response.status === 204) {\n                let uData = state.data.filter(e => e.sys_id !== toEdit.sys_id);\n                setState(Object.assign(state.data, {}, { columns: state.columns, data: uData }));\n                handleDeleteClose()\n                toast.success(\"Successfully deleted the incident.\")\n            } else {\n                handleDeleteClose()\n                toast.error(\"Some error occured while deleting the incident!\")\n            }\n        } catch (e) {\n            handleDeleteClose()\n            toast.error(\"Error deleting the incident. Please try again later.\")\n        }\n    }\n\n    const handleAdd = async () => {\n        try {\n            let sdesc = document.getElementById('asdesc').value;\n            let desc = document.getElementById('adesc').value;\n            let response = await Axios.post(`https://${instance}.service-now.com/api/now/table/incident`,\n                {\n                    short_description: sdesc,\n                    description: desc\n                },\n                {\n                    auth: {\n                        username: username,\n                        password: password\n                    }\n                })\n            // console.log(\"Add response\", response)\n            if (response && response.status === 201) {\n                let uData = state.data;\n                uData.unshift(response.data.result);\n                setState(Object.assign(state.data, {}, { columns: state.columns, data: uData }));\n                handleAddClose()\n                toast.success(`Successfully added the incident with number ${response.data.result.number} and sys_id ${response.data.result.sys_id}`)\n            } else {\n                handleAddClose()\n                toast.error(\"Some error occured while adding the incident!\")\n            }\n        } catch (e) {\n            handleAddClose()\n            toast.error(\"Error adding the incident. Please try again later.\")\n        }\n    }\n\n    return (\n        <React.Fragment>\n            <MaterialTable\n                style={{ margin: \"16px\" }}\n                title=\"Incidents\"\n                columns={state.columns}\n                data={state.data}\n                actions={[\n                    {\n                        icon: 'edit',\n                        tooltip: 'Edit incident',\n                        onClick: (event, rowData) => {\n                            setToEdit(Object.assign(toEdit, {}, rowData));\n                            handleEditOpen();\n                            // console.log(\"ToEdit\", toEdit)\n                            // alert(\"You edited \" + rowData.number)\n                        }\n                    },\n                    {\n                        icon: 'delete',\n                        tooltip: 'Delete incident',\n                        onClick: (event, rowData) => {\n                            setToEdit(Object.assign(toEdit, {}, rowData));\n                            handleDeleteOpen();\n                            // alert(\"You edited \" + rowData.number)\n                        }\n                    }\n                ]}\n                detailPanel={rowData => {\n                    return (\n                        <React.Fragment>\n                            <Chip\n                                style={{ marginLeft: \"16px\", marginRight: \"16px\", marginTop: \"16px\" }}\n                                label={rowData.number}\n                                clickable\n                                color=\"primary\"\n                            />\n                            <Chip\n                                style={{ marginLeft: \"16px\", marginRight: \"16px\", marginTop: \"16px\" }}\n                                label={'System Id: ' + rowData.sys_id}\n                                clickable\n                                color=\"secondary\"\n                            />\n                            <Typography style={{ marginLeft: \"16px\", marginRight: \"16px\", marginTop: \"16px\" }} variant=\"h6\">\n                                {`${rowData.made_sla ? 'Yes' : 'No'} SLA was made.`}<br />\n                            </Typography>\n\n                            <Typography style={{ margin: \"16px\" }} variant=\"h6\">\n                                {`${rowData.description}`}\n                            </Typography>\n\n                        </React.Fragment>\n\n                    )\n                }}\n                onRowClick={(event, rowData, togglePanel) => togglePanel()}\n\n                options={{\n                    actionsColumnIndex: -1\n                }}\n                components={{\n                    Toolbar: props => (\n                        <div>\n                            <MTableToolbar {...props} />\n                            <IconButton aria-label=\"Add\" onClick={handleAddOpen} style={{ backgroundColor: \"#1976d2\", color: \"white\" }} tooltip=\"Add incident\">\n                                <AddIcon />\n                            </IconButton>\n                        </div>\n                    ),\n                }}\n            />\n            {/* For Updating */}\n            <Dialog open={editOpen} onClose={handleEditClose} aria-labelledby=\"form-dialog-title\">\n                <DialogTitle id=\"form-dialog-title\">Edit: {toEdit ? toEdit.number : \"\"}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText>\n                        Please modify the following details.\n                    </DialogContentText>\n                    <TextField\n                        defaultValue={toEdit ? toEdit.short_description : \"\"}\n                        autoFocus\n                        margin=\"dense\"\n                        id=\"sdesc\"\n                        label=\"Short Description\"\n                        type=\"text\"\n                        fullWidth\n                        variant=\"outlined\"\n                    />\n                    <TextField\n                        defaultValue={toEdit ? toEdit.description : \"\"}\n                        style={{ marginTop: \"16px\" }}\n                        autoFocus\n                        margin=\"dense\"\n                        id=\"desc\"\n                        label=\"Description\"\n                        type=\"text\"\n                        fullWidth\n                        multiline\n                        variant=\"outlined\"\n                    />\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleEditClose} color=\"primary\">\n                        Cancel\n                    </Button>\n                    <Button onClick={handleUpdate} color=\"primary\">\n                        Update\n                    </Button>\n                </DialogActions>\n            </Dialog>\n            {/* For Delete Confirmation */}\n            <Dialog\n                open={deleteOpen}\n                onClose={handleDeleteClose}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n            >\n                <DialogTitle id=\"alert-dialog-title\">{\"Delete Incident?\"}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText id=\"alert-dialog-description\">\n                        Are you sure you want to delete this incident?\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleDeleteClose} color=\"primary\">\n                        No\n                    </Button>\n                    <Button onClick={handleDelete} color=\"primary\" autoFocus>\n                        Yes\n                    </Button>\n                </DialogActions>\n            </Dialog>\n            {/* For Adding New Incident Record */}\n            <Dialog open={addOpen} onClose={handleAddClose} aria-labelledby=\"form-dialog-title\">\n                <DialogTitle id=\"form-dialog-title\">Add incident</DialogTitle>\n                <DialogContent>\n                    <DialogContentText>\n                        Please fill the following details.\n                    </DialogContentText>\n                    <TextField\n                        autoFocus\n                        margin=\"dense\"\n                        id=\"asdesc\"\n                        label=\"Short Description\"\n                        type=\"text\"\n                        fullWidth\n                        variant=\"outlined\"\n                    />\n                    <TextField\n                        style={{ marginTop: \"16px\" }}\n                        autoFocus\n                        margin=\"dense\"\n                        id=\"adesc\"\n                        label=\"Description\"\n                        type=\"text\"\n                        fullWidth\n                        multiline\n                        variant=\"outlined\"\n                    />\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleAddClose} color=\"primary\">\n                        Cancel\n                    </Button>\n                    <Button onClick={handleAdd} color=\"primary\">\n                        Add\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </React.Fragment>\n    );\n\n\n}\n","import React from 'react'\nimport ButtonAppBar from './ButtonAppBar'\nimport Incidents from './Incidents'\n\nexport default function Dashboard(props) {\n\n    const loggedIn = props.globalState.isLoggedIn();\n    if (!loggedIn) props.history.push('/');\n    // console.log(\"Logged In = \" + props.globalState.isLoggedIn)\n    return (\n        <React.Fragment>\n            <ButtonAppBar />\n            <Incidents {...props} />\n        </React.Fragment>\n    )\n}","class GlobalState {\n\n    constructor(loggedIn) {\n        if (!GlobalState.instance) {\n            this.loggedIn = loggedIn;\n            this.username = undefined;\n            this.password = undefined;\n            this.instanceId = undefined;\n            GlobalState.instance = this;\n        }\n        return GlobalState.instance\n    }\n\n    setLoggedIn = (loggedIn) => {\n        this.loggedIn = loggedIn;\n    }\n\n    isLoggedIn = () => {\n        return this.loggedIn;\n    }\n}\n\nexport default new GlobalState();","import Axios from 'axios';\nimport GlobalState from './GlobalState'\nclass Snow {\n    constructor() {\n        if (!Snow.instance) {\n            this.BASE = undefined;\n            this.USER_NAME = undefined;\n            this.PASSWORD = undefined;\n            this.PATHS = {\n                LOGIN: (username) => `/v2/table/sys_user?user_name=${username}`,\n                INCIDENTS: () => '/table/incident?sysparm_limit=20&sysparm_query=active=true',\n\n            }\n            Snow.instance = this;\n        }\n\n        return Snow.instance;\n    }\n\n    login = async (username, password, instanceId) => {\n        this.BASE = `https://${instanceId}.service-now.com/api/now`;\n        let loginPath = this.BASE + this.PATHS.LOGIN(username);\n        return new Promise((resolve, reject) => {\n            const options = {\n                url: loginPath,\n                method: 'get',\n                auth: {\n                    username: `${username}`,\n                    password: `${password}`\n                }\n            };\n            Axios(options).then((val) => {\n                resolve(val);\n            }, (rej) => {\n                reject(rej);\n            });\n        })\n    }\n\n    getIncidents = () => {\n        this.incidentsPath = this.BASE + this.PATHS.INCIDENTS()\n        return new Promise((resolve, reject) => {\n            const options = {\n                url: this.incidentsPath,\n                method: 'get',\n                auth: {\n                    username: `${GlobalState.username}`,\n                    password: `${GlobalState.password}`\n                }\n            };\n            Axios(options).then((val) => {\n                resolve(val);\n            }, (rej) => {\n                reject(rej);\n            });\n        })\n    }\n}\n\nconst instance = new Snow();\n// Object.freeze(instance);\nexport default instance;","class Logger {\n    log = (...data) => {\n        data.forEach((item) => {\n            console.log(item);\n        })\n    }\n}\n\nexport default new Logger();","import React, { useState } from 'react'\nimport TextField from '@material-ui/core/TextField'\nimport Paper from '@material-ui/core/Paper'\nimport Grid from '@material-ui/core/Grid'\nimport Button from '@material-ui/core/Button'\nimport LinearProgress from '@material-ui/core/LinearProgress'\nimport ButtonAppBar from './ButtonAppBar'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { toast } from 'react-toastify'\nimport Error from '@material-ui/icons/Error'\nimport Snow from '../services/Snow'\nimport Logger from '../services/Logger'\n\nconst useStyles = makeStyles(theme => ({\n  container: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    margin: \"16px\"\n  },\n  input: {\n    margin: theme.spacing(1),\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n}));\n\nexport default function Login(props) {\n  const classes = useStyles();\n  const [loading, setLoading] = useState(false);\n  let loggedIn = props.globalState.isLoggedIn();\n  if (loggedIn) props.history.push('/dashboard');\n  async function handleClick(e) {\n    e.preventDefault();\n    setLoading(true);\n    let username = document.getElementById('username').value;\n    let password = document.getElementById('password').value;\n    let instanceId = document.getElementById('instanceId').value;\n    try {\n      let res = await Snow.login(username, password, instanceId)\n      if (res.status === 200) {\n        props.globalState.setLoggedIn(true);\n        props.globalState.username = username;\n        props.globalState.password = password;\n        props.globalState.instanceId = instanceId;\n        toast.success(<div>Logged in!</div>);\n        setLoading(false)\n        props.history.push('/dashboard')\n      }\n      Logger.log('Authenticated', res);\n    } catch (e) {\n      toast.error(<div><Error /> Login failed!!</div>);\n      setLoading(false)\n      Logger.log(\"Error\");\n    }\n    // try {\n    //   const options = {\n    //     url: `https://${instanceId}.service-now.com/api/now/v2/table/sys_user?user_name=${username}`,\n    //     method: 'get',\n    //     auth: {\n    //       username: `${username}`,\n    //       password: `${password}`\n    //     }\n    //   };\n    //   axios(options).then((val) => {\n    //     setLoading(false)\n    //     var res = {\n    //       raw: val,\n    //       status: val.status\n    //     }\n    //     if (val.status === 200) {\n    //       props.globalState.setLoggedIn(true);\n    //       props.globalState.username = username;\n    //       props.globalState.password = password;\n    //       props.globalState.instanceId = instanceId;\n    //       props.history.push('/dashboard')\n    //     }\n    //     console.log('Authenticated', res);\n    //   }, (rej) => {\n    //     toast.error(<div><Error /> Login failed!!</div>);\n    //     setLoading(false)\n    //     console.log(rej);\n    //   });\n    // } catch (e) {\n    //   console.log(e)\n    // }\n\n  }\n\n  return (\n    <React.Fragment>\n      <ButtonAppBar />\n      <form className={classes.container} style={{ justifyContent: \"center\", alignItems: \"center\" }} noValidate autoComplete=\"off\">\n        <Paper className={classes.paper} style={{ width: \"500px\" }}>\n          <Grid container spacing={1} direction=\"column\" >\n            <Grid item xs={12}>\n              <TextField\n                style={{ width: \"100%\" }}\n                id=\"username\"\n                label=\"Username\"\n                className={classes.textField}\n                type=\"text\"\n                name=\"username\"\n                autoComplete=\"email\"\n                margin=\"normal\"\n                variant=\"outlined\"\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                style={{ width: \"100%\" }}\n                id=\"password\"\n                label=\"Password\"\n                className={classes.textField}\n                type=\"password\"\n                name=\"pwd\"\n                margin=\"normal\"\n                variant=\"outlined\"\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                style={{ width: \"100%\" }}\n                id=\"instanceId\"\n                defaultValue=\"dev78916\"\n                label=\"Instance name\"\n                className={classes.textField}\n                type=\"email\"\n                name=\"email\"\n                autoComplete=\"email\"\n                margin=\"normal\"\n                variant=\"outlined\"\n              />\n            </Grid>\n            <Grid item xs={12} style={{ display: \"flex\", justifyContent: \"center\", alignItems: \"center\", flexDirection: \"column\" }}>\n              <Button style={{ width: \"100%\", margin: '0' }} disabled={loading ? true : false} variant=\"contained\" color=\"primary\" size=\"large\" className={classes.button} onClick={handleClick}>\n                Login\n            </Button>\n              {loading ?\n                <LinearProgress variant=\"query\" style={{ width: \"100%\", margin: '0' }} />\n                : \"\"\n              }\n            </Grid>\n          </Grid>\n        </Paper>\n      </form>\n    </React.Fragment>\n  );\n}","import React from 'react';\nimport './App.css';\nimport Dashboard from './components/Dashboard';\nimport { HashRouter } from \"react-router-dom\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Login from './components/Login';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { ToastContainer, toast } from 'react-toastify';\n\nfunction App(aprops) {\n  // console.log(aprops.globalState)\n  return (\n    <HashRouter basename=\"/\">\n      <div className=\"App\">\n        <React.Fragment>\n          <Switch>\n            <Route path=\"/\" exact render={(props) => <Login {...props} globalState={aprops.globalState} />} />\n            <Route path=\"/dashboard\" render={(props) => <Dashboard {...props} globalState={aprops.globalState} />} />\n          </Switch>\n          <ToastContainer position={toast.POSITION.TOP_RIGHT} autoClose={5000} />\n        </React.Fragment>\n      </div>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'typeface-roboto';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport GlobalState from './services/GlobalState'\n// const globalState = new GlobalState(false);\nReactDOM.render(<App globalState={GlobalState} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}