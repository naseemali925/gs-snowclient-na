{"version":3,"sources":["components/ButtonAppBar.js","components/Incidents.js","components/Dashboard.js","components/Login.js","App.js","serviceWorker.js","index.js","services/GlobalState.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","content","padding","ButtonAppBar","props","classes","className","AppBar","position","Toolbar","Typography","variant","Incidents","globalState","username","password","instance","React","useState","toEdit","setToEdit","editOpen","setEditOpen","handleEditClose","setDeleteOpen","columns","field","data","state","setState","loadIncidents","a","Axios","get","auth","response","Object","assign","result","console","log","status","useEffect","handleUpdate","sdesc","document","getElementById","value","desc","put","sys_id","short_description","description","uData","map","e","toast","error","Fragment","style","margin","actions","icon","tooltip","onClick","event","rowData","detailPanel","Chip","marginLeft","marginTop","label","number","clickable","color","made_sla","onRowClick","togglePanel","options","actionsColumnIndex","Dialog","open","onClose","aria-labelledby","DialogTitle","id","DialogContent","DialogContentText","TextField","autoFocus","type","fullWidth","DialogActions","Button","Dashboard","isLoggedIn","container","display","flexWrap","input","paper","textAlign","palette","text","secondary","button","Login","loading","setLoading","preventDefault","instanceId","url","method","axios","then","val","res","raw","setLoggedIn","history","push","rej","justifyContent","alignItems","noValidate","autoComplete","Paper","width","Grid","direction","item","xs","textField","name","defaultValue","flexDirection","disabled","size","LinearProgress","App","aprops","basename","path","exact","render","POSITION","TOP_RIGHT","autoClose","Boolean","window","location","hostname","match","loggedIn","this","undefined","ReactDOM","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.18592110.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n// import Button from '@material-ui/core/Button';\n// import IconButton from '@material-ui/core/IconButton';\n// import MenuIcon from '@material-ui/icons/Menu';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n  }\n}));\n\nexport default function ButtonAppBar(props) {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title}>\n            SNOW Client\n          </Typography>\n          {/* <Button color=\"inherit\">Login</Button> */}\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport MaterialTable from 'material-table';\nimport Axios from 'axios';\nimport Typography from '@material-ui/core/Typography'\nimport Chip from '@material-ui/core/Chip'\nimport Button from '@material-ui/core/Button'\nimport TextField from '@material-ui/core/TextField'\nimport { toast } from 'react-toastify'\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nexport default function Incidents(props) {\n\n    const globalState = props.globalState;\n    const username = globalState.username;\n    const password = globalState.password;\n    const instance = globalState.instance;\n    const [toEdit, setToEdit] = React.useState({});\n    const [editOpen, setEditOpen] = React.useState(false);\n\n    const handleEditOpen = () => {\n        setEditOpen(true);\n    };\n\n    const handleEditClose = () => {\n        setEditOpen(false);\n    };\n    const [deleteOpen, setDeleteOpen] = React.useState(false);\n\n    const handleDeleteOpen = () => {\n        setDeleteOpen(true);\n    };\n\n    const handleDeleteClose = () => {\n        setDeleteOpen(false);\n    };\n    const [state, setState] = useState({\n        columns: [\n            { title: 'Number', field: 'number' },\n            { title: 'Opened', field: 'opened_at' },\n            { title: 'Short Description', field: 'short_description' },\n\n        ],\n        data: [\n\n        ],\n    });\n    const loadIncidents = async () => {\n        try {\n            let response = await Axios.get(`https://${instance}.service-now.com/api/now/table/incident?sysparm_limit=20&sysparm_query=active=true`, {\n                auth: {\n                    username: username,\n                    password: password\n                }\n            });\n            setState(Object.assign(response.data.result, {}, { columns: state.columns, data: response.data.result }));\n            console.log(response.status, response.data.result);\n        } catch (e) {\n            console.log(e);\n        }\n    }\n    useEffect(() => {\n        loadIncidents();\n    }, []);\n\n    const handleUpdate = async () => {\n        try {\n            let sdesc = document.getElementById('sdesc').value;\n            let desc = document.getElementById('desc').value;\n            let response = await Axios.put(`https://${instance}.service-now.com/api/now/table/incident/${toEdit.sys_id}`,\n                {\n                    short_description: sdesc,\n                    description: desc\n                }, {\n                auth: {\n                    username: username,\n                    password: password\n                }\n            })\n            if (response && response.status === 200) {\n                let uData = state.data.map(e => {\n                    if (e.sys_id === toEdit.sys_id) {\n                        return response.data.result\n                    }\n                    return e;\n                });\n                setState(Object.assign(state.data, {}, { columns: state.columns, data: uData }));\n            } else {\n                toast.error(\"Some Error Occured While updated the incident\")\n            }\n        } catch (e) {\n            toast.error(\"Error Updating The Record. Please try again later.\")\n        }\n    }\n\n    const handleDelete = async () => {\n        try {\n            let response = await Axios.delete(`https://${instance}.service-now.com/api/now/table/incident/${toEdit.sys_id}`,\n                {}, {\n                auth: {\n                    username: username,\n                    password: password\n                }\n            })\n            if (response && response.status === 200) {\n                let uData = state.data.filter(e => e.sys_id === toEdit.sys_id);\n                setState(Object.assign(state.data, {}, { columns: state.columns, data: uData }));\n            } else {\n                toast.error(\"Some Error Occured While updated the incident\")\n            }\n        } catch (e) {\n            toast.error(\"Error Updating The Record. Please try again later.\")\n        }\n    }\n\n    return (\n        <React.Fragment>\n            <MaterialTable\n                style={{ margin: \"16px\" }}\n                title=\"Incidents\"\n                columns={state.columns}\n                data={state.data}\n                actions={[\n                    {\n                        icon: 'edit',\n                        tooltip: 'Edit incident',\n                        onClick: (event, rowData) => {\n                            setToEdit(Object.assign(toEdit, {}, rowData));\n                            handleEditOpen();\n                            console.log(\"ToEdit\", toEdit)\n                            // alert(\"You edited \" + rowData.number)\n                        }\n                    },\n                    {\n                        icon: 'delete',\n                        tooltip: 'Delete incident',\n                        onClick: (event, rowData) => {\n                            setToEdit(Object.assign(toEdit, {}, rowData));\n                            handleDeleteOpen();\n                            // alert(\"You edited \" + rowData.number)\n                        }\n                    }\n                ]}\n                detailPanel={rowData => {\n                    return (\n                        <React.Fragment>\n                            <Chip\n                                style={{ marginLeft: \"16px\", marginRight: \"16px\", marginTop: \"16px\" }}\n                                label={rowData.number}\n                                clickable\n                                color=\"primary\"\n                            />\n                            <Chip\n                                style={{ marginLeft: \"16px\", marginRight: \"16px\", marginTop: \"16px\" }}\n                                label={'System Id: ' + rowData.sys_id}\n                                clickable\n                                color=\"secondary\"\n                            />\n                            <Typography style={{ marginLeft: \"16px\", marginRight: \"16px\", marginTop: \"16px\" }} variant=\"h6\">\n                                {`${rowData.made_sla ? 'Yes' : 'No'} SLA was made.`}<br />\n                            </Typography>\n\n                            <Typography style={{ margin: \"16px\" }} variant=\"h6\">\n                                {`${rowData.description}`}\n                            </Typography>\n\n                        </React.Fragment>\n\n                    )\n                }}\n                onRowClick={(event, rowData, togglePanel) => togglePanel()}\n                /* editable={{\n                    onRowAdd: newData =>\n                        new Promise(async (resolve, reject) => {\n                            try {\n                                const basicAuth = 'Basic ' + btoa(username + ':' + password);\n                                let response = await Axios.post(`https://${instance}.service-now.com/api/now/table/incident`,\n                                    {\n                                        short_description: newData.short_description,\n                                    },\n                                    {\n                                        auth: {\n                                            username: username,\n                                            password: password\n                                        }\n                                    });\n                            } catch (e) {\n    \n                            }\n                            setTimeout(() => {\n                                resolve();\n                                const data = [...state.data];\n                                data.push(newData);\n                                setState({ ...state, data });\n                            }, 600);\n                        })\n                }}*/\n                options={{\n                    actionsColumnIndex: -1\n                }}\n            />\n            <Dialog open={editOpen} onClose={handleEditClose} aria-labelledby=\"form-dialog-title\">\n                <DialogTitle id=\"form-dialog-title\">Edit: {toEdit ? toEdit.number : \"\"}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText>\n                        Please modify the following details.\n                    </DialogContentText>\n                    <TextField\n                        autoFocus\n                        margin=\"dense\"\n                        id=\"sdesc\"\n                        label=\"Short Description\"\n                        type=\"text\"\n                        fullWidth\n                        variant=\"outlined\"\n                    />\n                    <TextField\n                        style={{ marginTop: \"16px\" }}\n                        autoFocus\n                        margin=\"dense\"\n                        id=\"desc\"\n                        label=\"Description\"\n                        type=\"text\"\n                        fullWidth\n                        variant=\"outlined\"\n                    />\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleEditClose} color=\"primary\">\n                        Cancel\n                    </Button>\n                    <Button onClick={handleUpdate} color=\"primary\">\n                        Update\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </React.Fragment>\n    );\n\n\n}\n","import React from 'react'\nimport ButtonAppBar from './ButtonAppBar'\nimport Incidents from './Incidents'\n\nexport default function Dashboard(props) {\n\n    const loggedIn = props.globalState.isLoggedIn();\n    // if (!loggedIn) props.history.push('/');\n    // console.log(\"Logged In = \" + props.globalState.isLoggedIn)\n    return (\n        <React.Fragment>\n            <ButtonAppBar />\n            <Incidents {...props} />\n        </React.Fragment>\n    )\n}","import React, { useState } from 'react'\nimport TextField from '@material-ui/core/TextField'\nimport Paper from '@material-ui/core/Paper'\nimport Grid from '@material-ui/core/Grid'\nimport Button from '@material-ui/core/Button'\nimport LinearProgress from '@material-ui/core/LinearProgress'\nimport ButtonAppBar from './ButtonAppBar'\nimport axios from 'axios'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { toast } from 'react-toastify'\nimport Error from '@material-ui/icons/Error'\n\nconst useStyles = makeStyles(theme => ({\n  container: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    margin: \"16px\"\n  },\n  input: {\n    margin: theme.spacing(1),\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n}));\n\nexport default function Login(props) {\n  const classes = useStyles();\n  const [loading, setLoading] = useState(false);\n  let loggedIn = props.globalState.isLoggedIn();\n  if (loggedIn) props.history.push('/dashboard');\n  async function handleClick(e) {\n    e.preventDefault();\n    setLoading(true);\n    let username = document.getElementById('username').value;\n    let password = document.getElementById('password').value;\n    let instanceId = document.getElementById('instanceId').value;\n    try {\n      const options = {\n        url: `https://${instanceId}.service-now.com/api/now/v2/table/sys_user?user_name=${username}`,\n        method: 'get',\n        auth: {\n          username: `${username}`,\n          password: `${password}`\n        }\n      };\n      axios(options).then((val) => {\n        setLoading(false)\n        var res = {\n          raw: val,\n          status: val.status\n        }\n        if (val.status === 200) {\n          props.globalState.setLoggedIn(true);\n          props.globalState.username = username;\n          props.globalState.password = password;\n          props.globalState.instance = instanceId;\n          props.history.push('/dashboard')\n        }\n        console.log('Authenticated', res);\n      }, (rej) => {\n        toast.error(<div><Error /> Login failed!!</div>);\n        setLoading(false)\n        console.log(rej);\n      });\n    } catch (e) {\n      console.log(e)\n    }\n\n  }\n\n  return (\n    <React.Fragment>\n      <ButtonAppBar />\n      <form className={classes.container} style={{ justifyContent: \"center\", alignItems: \"center\" }} noValidate autoComplete=\"off\">\n        <Paper className={classes.paper} style={{ width: \"500px\" }}>\n          <Grid container spacing={1} direction=\"column\" >\n            <Grid item xs={12}>\n              <TextField\n                style={{ width: \"100%\" }}\n                id=\"username\"\n                label=\"Username\"\n                className={classes.textField}\n                type=\"text\"\n                name=\"username\"\n                autoComplete=\"email\"\n                margin=\"normal\"\n                variant=\"outlined\"\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                style={{ width: \"100%\" }}\n                id=\"password\"\n                label=\"Password\"\n                className={classes.textField}\n                type=\"password\"\n                name=\"pwd\"\n                margin=\"normal\"\n                variant=\"outlined\"\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                style={{ width: \"100%\" }}\n                id=\"instanceId\"\n                defaultValue=\"dev78916\"\n                label=\"Instance name\"\n                className={classes.textField}\n                type=\"email\"\n                name=\"email\"\n                autoComplete=\"email\"\n                margin=\"normal\"\n                variant=\"outlined\"\n              />\n            </Grid>\n            <Grid item xs={12} style={{ display: \"flex\", justifyContent: \"center\", alignItems: \"center\", flexDirection: \"column\" }}>\n              <Button style={{ width: \"100%\", margin: '0' }} disabled={loading ? true : false} variant=\"contained\" color=\"primary\" size=\"large\" className={classes.button} onClick={handleClick}>\n                Login\n            </Button>\n              {loading ?\n                <LinearProgress variant=\"query\" style={{ width: \"100%\", margin: '0' }} />\n                : \"\"\n              }\n            </Grid>\n          </Grid>\n        </Paper>\n      </form>\n    </React.Fragment>\n  );\n}","import React from 'react';\nimport './App.css';\nimport Dashboard from './components/Dashboard';\nimport { HashRouter } from \"react-router-dom\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Login from './components/Login';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { ToastContainer, toast } from 'react-toastify';\n\nfunction App(aprops) {\n  // console.log(aprops.globalState)\n  return (\n    <HashRouter basename=\"/\">\n      <div className=\"App\">\n        <React.Fragment>\n          <Switch>\n            <Route path=\"/\" exact render={(props) => <Login {...props} globalState={aprops.globalState} />} />\n            <Route path=\"/dashboard\" render={(props) => <Dashboard {...props} globalState={aprops.globalState} />} />\n          </Switch>\n          <ToastContainer position={toast.POSITION.TOP_RIGHT} autoClose={5000} />\n        </React.Fragment>\n      </div>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'typeface-roboto';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport GlobalState from './services/GlobalState'\nconst globalState = new GlobalState(false);\nReactDOM.render(<App globalState={globalState} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","\nexport default class GlobalState {\n\n    constructor(loggedIn) {\n        this.loggedIn = loggedIn;\n        this.username = undefined;\n        this.password = undefined;\n        this.instance = undefined;\n    }\n\n    setLoggedIn = (loggedIn) => {\n        this.loggedIn = loggedIn;\n    }\n\n    isLoggedIn = () => {\n        return this.loggedIn;\n    }\n}"],"sourceRoot":""}